import React, { useState } from 'react';
import styles from './RepairCostCalculator.module.scss';

const RepairCostCalculator: React.FC = () => {
  const [repairType, setRepairType] = useState('cosmetic');
  const [roomArea, setRoomArea] = useState('');
  const [roomType, setRoomType] = useState('bedroom');
  const [materials, setMaterials] = useState('standard');
  const [urgency, setUrgency] = useState('normal');
  const [region, setRegion] = useState('moscow');
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState('');

  const calculateCost = () => {
    setError('');

    if (!roomArea) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è');
      return;
    }

    const area = parseFloat(roomArea);
    if (isNaN(area) || area <= 0 || area > 1000) {
      setError('–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –Ω–µ –±–æ–ª–µ–µ 1000 –º¬≤');
      return;
    }

    // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –∑–∞ –º¬≤ (–≤ —Ä—É–±–ª—è—Ö)
    const basePrices = getBasePrices(repairType);
    const roomMultiplier = getRoomMultiplier(roomType);
    const materialsMultiplier = getMaterialsMultiplier(materials);
    const urgencyMultiplier = getUrgencyMultiplier(urgency);
    const regionMultiplier = getRegionMultiplier(region);

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const baseCost = area * basePrices.work;
    const materialsCost = area * basePrices.materials * materialsMultiplier;
    const totalCost =
      (baseCost + materialsCost) *
      roomMultiplier *
      urgencyMultiplier *
      regionMultiplier;

    // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–∞–º
    const workBreakdown = calculateWorkBreakdown(
      area,
      basePrices,
      roomMultiplier,
      urgencyMultiplier,
      regionMultiplier
    );

    setResult({
      area: area.toFixed(1),
      repairType: getRepairTypeName(repairType),
      roomType: getRoomTypeName(roomType),
      baseCost: baseCost.toFixed(0),
      materialsCost: materialsCost.toFixed(0),
      totalCost: totalCost.toFixed(0),
      workBreakdown,
      duration: calculateDuration(area, repairType),
      recommendations: getRecommendations(repairType, materials, urgency),
    });
  };

  const getBasePrices = (type: string) => {
    switch (type) {
      case 'cosmetic':
        return { work: 2500, materials: 1500 };
      case 'standard':
        return { work: 4500, materials: 3000 };
      case 'premium':
        return { work: 8000, materials: 6000 };
      case 'luxury':
        return { work: 15000, materials: 12000 };
      case 'renovation':
        return { work: 12000, materials: 8000 };
      default:
        return { work: 4500, materials: 3000 };
    }
  };

  const getRoomMultiplier = (type: string): number => {
    switch (type) {
      case 'bathroom':
        return 1.3; // –í–∞–Ω–Ω–∞—è - —Å–ª–æ–∂–Ω–µ–µ
      case 'kitchen':
        return 1.2; // –ö—É—Ö–Ω—è - —Å–ª–æ–∂–Ω–µ–µ
      case 'bedroom':
        return 1.0; // –°–ø–∞–ª—å–Ω—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç
      case 'living':
        return 1.1; // –ì–æ—Å—Ç–∏–Ω–∞—è - –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ
      case 'corridor':
        return 0.8; // –ö–æ—Ä–∏–¥–æ—Ä - –ø—Ä–æ—â–µ
      case 'balcony':
        return 0.7; // –ë–∞–ª–∫–æ–Ω - –ø—Ä–æ—â–µ
      default:
        return 1.0;
    }
  };

  const getMaterialsMultiplier = (type: string): number => {
    switch (type) {
      case 'economy':
        return 0.7;
      case 'standard':
        return 1.0;
      case 'premium':
        return 1.5;
      case 'luxury':
        return 2.5;
      default:
        return 1.0;
    }
  };

  const getUrgencyMultiplier = (type: string): number => {
    switch (type) {
      case 'slow':
        return 0.9;
      case 'normal':
        return 1.0;
      case 'fast':
        return 1.3;
      case 'urgent':
        return 1.8;
      default:
        return 1.0;
    }
  };

  const getRegionMultiplier = (type: string): number => {
    switch (type) {
      case 'moscow':
        return 1.5;
      case 'spb':
        return 1.4;
      case 'million':
        return 1.2;
      case 'regional':
        return 1.0;
      case 'rural':
        return 0.8;
      default:
        return 1.0;
    }
  };

  const calculateWorkBreakdown = (
    area: number,
    basePrices: any,
    roomMultiplier: number,
    urgencyMultiplier: number,
    regionMultiplier: number
  ) => {
    const multiplier = roomMultiplier * urgencyMultiplier * regionMultiplier;

    return {
      demolition: (area * 800 * multiplier).toFixed(0),
      roughWork: (area * basePrices.work * 0.4 * multiplier).toFixed(0),
      finishing: (area * basePrices.work * 0.6 * multiplier).toFixed(0),
      electrical: (area * 1200 * multiplier).toFixed(0),
      plumbing: (area * 1500 * multiplier).toFixed(0),
      painting: (area * 1000 * multiplier).toFixed(0),
      flooring: (area * 2000 * multiplier).toFixed(0),
    };
  };

  const calculateDuration = (area: number, repairType: string): string => {
    let baseDays = area * 0.5; // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è

    switch (repairType) {
      case 'cosmetic':
        baseDays *= 0.5;
        break;
      case 'standard':
        baseDays *= 1.0;
        break;
      case 'premium':
        baseDays *= 1.5;
        break;
      case 'luxury':
        baseDays *= 2.5;
        break;
      case 'renovation':
        baseDays *= 2.0;
        break;
    }

    const days = Math.ceil(baseDays);
    if (days < 7) return `${days} –¥–Ω–µ–π`;
    if (days < 30) return `${Math.ceil(days / 7)} –Ω–µ–¥–µ–ª—å`;
    return `${Math.ceil(days / 30)} –º–µ—Å—è—Ü–µ–≤`;
  };

  const getRecommendations = (
    repairType: string,
    materials: string,
    urgency: string
  ): string[] => {
    const recommendations = [];

    if (repairType === 'cosmetic') {
      recommendations.push(
        '–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –±–µ–∑ –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π'
      );
    } else if (repairType === 'renovation') {
      recommendations.push(
        '–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤'
      );
    }

    if (materials === 'economy') {
      recommendations.push(
        '–≠–∫–æ–Ω–æ–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –∑–∞–º–µ–Ω—ã —á–µ—Ä–µ–∑ 3-5 –ª–µ—Ç'
      );
    } else if (materials === 'premium') {
      recommendations.push(
        '–ü—Ä–µ–º–∏—É–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±–µ—Å–ø–µ—á–∞—Ç –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å –∏ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'
      );
    }

    if (urgency === 'urgent') {
      recommendations.push(
        '–°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç—å –¥–æ—Ä–æ–∂–µ –∏–∑-–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ'
      );
    }

    recommendations.push(
      '–ü–æ–ª—É—á–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω'
    );
    recommendations.push('–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å - –ª–µ—Ç–æ–º —Ü–µ–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã—à–µ');

    return recommendations;
  };

  const clearForm = () => {
    setRepairType('cosmetic');
    setRoomArea('');
    setRoomType('bedroom');
    setMaterials('standard');
    setUrgency('normal');
    setRegion('moscow');
    setResult(null);
    setError('');
  };

  const getRepairTypeName = (type: string): string => {
    switch (type) {
      case 'cosmetic':
        return '–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π';
      case 'standard':
        return '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π';
      case 'premium':
        return '–ü—Ä–µ–º–∏—É–º';
      case 'luxury':
        return '–õ—é–∫—Å';
      case 'renovation':
        return '–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π';
      default:
        return '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π';
    }
  };

  const getRoomTypeName = (type: string): string => {
    switch (type) {
      case 'bathroom':
        return '–í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞';
      case 'kitchen':
        return '–ö—É—Ö–Ω—è';
      case 'bedroom':
        return '–°–ø–∞–ª—å–Ω—è';
      case 'living':
        return '–ì–æ—Å—Ç–∏–Ω–∞—è';
      case 'corridor':
        return '–ö–æ—Ä–∏–¥–æ—Ä';
      case 'balcony':
        return '–ë–∞–ª–∫–æ–Ω/–õ–æ–¥–∂–∏—è';
      default:
        return '–°–ø–∞–ª—å–Ω—è';
    }
  };

  const getMaterialsName = (type: string): string => {
    switch (type) {
      case 'economy':
        return '–≠–∫–æ–Ω–æ–º–Ω—ã–µ';
      case 'standard':
        return '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ';
      case 'premium':
        return '–ü—Ä–µ–º–∏—É–º';
      case 'luxury':
        return '–õ—é–∫—Å';
      default:
        return '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ';
    }
  };

  const getUrgencyName = (type: string): string => {
    switch (type) {
      case 'slow':
        return '–ù–µ —Å–ø–µ—à–∞ (—Å–∫–∏–¥–∫–∞ 10%)';
      case 'normal':
        return '–û–±—ã—á–Ω—ã–µ —Å—Ä–æ–∫–∏';
      case 'fast':
        return '–ë—ã—Å—Ç—Ä–æ (+30%)';
      case 'urgent':
        return '–°—Ä–æ—á–Ω–æ (+80%)';
      default:
        return '–û–±—ã—á–Ω—ã–µ —Å—Ä–æ–∫–∏';
    }
  };

  const getRegionName = (type: string): string => {
    switch (type) {
      case 'moscow':
        return '–ú–æ—Å–∫–≤–∞ (+50%)';
      case 'spb':
        return '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (+40%)';
      case 'million':
        return '–ì–æ—Ä–æ–¥-–º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫ (+20%)';
      case 'regional':
        return '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä';
      case 'rural':
        return '–°–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å (-20%)';
      default:
        return '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä';
    }
  };

  return (
    <div className={`${styles.calculator} repairCostCalculator`}>
      <div className="calculatorHeader">
        <h2>üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞</h2>
        <p>
          –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –ø–æ–º–µ—â–µ–Ω–∏—è. –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–∏–ø
          —Ä–µ–º–æ–Ω—Ç–∞, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ —Ä–µ–≥–∏–æ–Ω.
        </p>
      </div>

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          calculateCost();
        }}
      >
        <div className="inputGroup">
          <label htmlFor="roomArea">–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)</label>
          <input
            id="roomArea"
            type="number"
            value={roomArea}
            onChange={(e) => setRoomArea(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 25.5"
            step="0.1"
            min="1"
            max="1000"
          />
          <div className="help">
            –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö
          </div>
        </div>

        <div className="inputGroup">
          <label>–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞ –∏ –ø–æ–º–µ—â–µ–Ω–∏—è</label>
          <div className="inputRow">
            <div>
              <label htmlFor="repairType">–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞</label>
              <select
                id="repairType"
                value={repairType}
                onChange={(e) => setRepairType(e.target.value)}
              >
                <option value="cosmetic">–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π</option>
                <option value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</option>
                <option value="premium">–ü—Ä–µ–º–∏—É–º</option>
                <option value="luxury">–õ—é–∫—Å</option>
                <option value="renovation">–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π</option>
              </select>
              <div className="help">
                {getRepairTypeName(repairType)} - –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–µ–º–æ–Ω—Ç–∞
              </div>
            </div>
            <div>
              <label htmlFor="roomType">–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è</label>
              <select
                id="roomType"
                value={roomType}
                onChange={(e) => setRoomType(e.target.value)}
              >
                <option value="bedroom">üõèÔ∏è –°–ø–∞–ª—å–Ω—è</option>
                <option value="living">üõãÔ∏è –ì–æ—Å—Ç–∏–Ω–∞—è</option>
                <option value="kitchen">üç≥ –ö—É—Ö–Ω—è</option>
                <option value="bathroom">üöø –í–∞–Ω–Ω–∞—è</option>
                <option value="corridor">üö™ –ö–æ—Ä–∏–¥–æ—Ä</option>
                <option value="balcony">üè† –ë–∞–ª–∫–æ–Ω</option>
              </select>
              <div className="help">
                {getRoomTypeName(roomType)} - –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç
              </div>
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–ö–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ä–æ–∫–∏</label>
          <div className="inputRow">
            <div>
              <label htmlFor="materials">–ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</label>
              <select
                id="materials"
                value={materials}
                onChange={(e) => setMaterials(e.target.value)}
              >
                <option value="economy">–≠–∫–æ–Ω–æ–º–Ω—ã–µ</option>
                <option value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ</option>
                <option value="premium">–ü—Ä–µ–º–∏—É–º</option>
                <option value="luxury">–õ—é–∫—Å</option>
              </select>
              <div className="help">
                {getMaterialsName(materials)} - –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å
              </div>
            </div>
            <div>
              <label htmlFor="urgency">–°—Ä–æ—á–Ω–æ—Å—Ç—å</label>
              <select
                id="urgency"
                value={urgency}
                onChange={(e) => setUrgency(e.target.value)}
              >
                <option value="slow">–ù–µ —Å–ø–µ—à–∞</option>
                <option value="normal">–û–±—ã—á–Ω—ã–µ —Å—Ä–æ–∫–∏</option>
                <option value="fast">–ë—ã—Å—Ç—Ä–æ</option>
                <option value="urgent">–°—Ä–æ—á–Ω–æ</option>
              </select>
              <div className="help">
                {getUrgencyName(urgency)} - –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
              </div>
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label htmlFor="region">–†–µ–≥–∏–æ–Ω</label>
          <select
            id="region"
            value={region}
            onChange={(e) => setRegion(e.target.value)}
          >
            <option value="moscow">–ú–æ—Å–∫–≤–∞</option>
            <option value="spb">–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</option>
            <option value="million">–ì–æ—Ä–æ–¥-–º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫</option>
            <option value="regional">–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä</option>
            <option value="rural">–°–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å</option>
          </select>
          <div className="help">
            {getRegionName(region)} - –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
          </div>
        </div>

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
          </button>
        </div>
      </form>

      {result && (
        <div className="result">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>

          <div className={styles.costSummary}>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è:</span>
              <span className={styles.value}>{result.area} –º¬≤</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞:</span>
              <span className={styles.value}>{result.repairType}</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:</span>
              <span className={styles.value}>{result.roomType}</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
              <span className={styles.value}>{result.duration}</span>
            </div>
          </div>

          <div className={styles.resultValue}>
            <span className={styles.amount}>{result.totalCost}</span>
            <span className={styles.unit}>—Ä—É–±–ª–µ–π</span>
          </div>

          <div className={styles.costBreakdown}>
            <h4>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç:</h4>
            <div className={styles.breakdownGrid}>
              <div className={styles.breakdownItem}>
                <span className={styles.label}>–†–∞–±–æ—Ç—ã:</span>
                <span className={styles.value}>{result.baseCost} ‚ÇΩ</span>
              </div>
              <div className={styles.breakdownItem}>
                <span className="label">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</span>
                <span className="value">{result.materialsCost} ‚ÇΩ</span>
              </div>
              <div className={styles.breakdownItem}>
                <span className={styles.label}>–î–µ–º–æ–Ω—Ç–∞–∂:</span>
                <span className={styles.value}>
                  {result.workBreakdown.demolition} ‚ÇΩ
                </span>
              </div>
              <div className={styles.breakdownItem}>
                <span className={styles.label}>–ß–µ—Ä–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã:</span>
                <span className={styles.value}>
                  {result.workBreakdown.roughWork} ‚ÇΩ
                </span>
              </div>
              <div className={styles.breakdownItem}>
                <span className={styles.label}>–û—Ç–¥–µ–ª–∫–∞:</span>
                <span className={styles.value}>
                  {result.workBreakdown.finishing} ‚ÇΩ
                </span>
              </div>
              <div className={styles.breakdownItem}>
                <span className={styles.label}>–≠–ª–µ–∫—Ç—Ä–∏–∫–∞:</span>
                <span className={styles.value}>
                  {result.workBreakdown.electrical} ‚ÇΩ
                </span>
              </div>
              <div className={styles.breakdownItem}>
                <span className={styles.label}>–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞:</span>
                <span className={styles.value}>
                  {result.workBreakdown.plumbing} ‚ÇΩ
                </span>
              </div>
              <div className={styles.breakdownItem}>
                <span className={styles.label}>–ü–æ–∫—Ä–∞—Å–∫–∞:</span>
                <span className={styles.value}>
                  {result.workBreakdown.painting} ‚ÇΩ
                </span>
              </div>
              <div className={styles.breakdownItem}>
                <span className={styles.label}>–ü–æ–ª—ã:</span>
                <span className={styles.value}>
                  {result.workBreakdown.flooring} ‚ÇΩ
                </span>
              </div>
            </div>
          </div>

          <div className={styles.recommendation}>
            <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
            <ul className={styles.recommendationsList}>
              {result.recommendations.map((rec: string, index: number) => (
                <li key={index}>{rec}</li>
              ))}
            </ul>
            <p style={{ marginTop: '1rem', fontSize: '0.9rem' }}>
              <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.
              –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö
              —É—Å–ª–æ–≤–∏–π, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.
            </p>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default RepairCostCalculator;

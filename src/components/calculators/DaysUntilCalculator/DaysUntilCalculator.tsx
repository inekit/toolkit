import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import styles from './DaysUntilCalculator.module.scss';

const DaysUntilCalculator: React.FC = () => {
  const [searchParams] = useSearchParams();
  const [targetDate, setTargetDate] = useState('');
  const [result, setResult] = useState<number | null>(null);
  const [error, setError] = useState('');
  const [isEmbedded, setIsEmbeded] = useState(false);
  const [preset, setPreset] = useState('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ embed —Ä–µ–∂–∏–º–µ
  useEffect(() => {
    const isEmbed = window.location.pathname.includes('/embed/');
    setIsEmbeded(isEmbed);
  }, []);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è embed)
  useEffect(() => {
    const dateFromUrl = searchParams.get('date');
    const presetFromUrl = searchParams.get('preset');

    if (presetFromUrl) {
      setPreset(presetFromUrl);
    }

    if (dateFromUrl) {
      setTargetDate(dateFromUrl);
      calculateDaysUntil(dateFromUrl);
    }
  }, [searchParams]);

  const calculateDaysUntil = (dateString: string) => {
    setError('');

    if (!dateString) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
      return;
    }

    const target = new Date(dateString);
    const today = new Date();

    if (isNaN(target.getTime())) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É');
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π
    today.setHours(0, 0, 0, 0);
    target.setHours(0, 0, 0, 0);

    const diffTime = target.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    setResult(diffDays);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    calculateDaysUntil(targetDate);
  };

  const clearForm = () => {
    setTargetDate('');
    setResult(null);
    setError('');
  };

  const setPresetDate = (preset: string) => {
    let date: Date;

    setPreset(preset);

    switch (preset) {
      case 'newyear':
        date = new Date(new Date().getFullYear() + 1, 0, 1); // 1 —è–Ω–≤–∞—Ä—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
        break;
      case 'christmas':
        const currentYear = new Date().getFullYear();
        const christmas = new Date(currentYear, 11, 25); // 25 –¥–µ–∫–∞–±—Ä—è
        if (christmas < new Date()) {
          christmas.setFullYear(currentYear + 1); // –ï—Å–ª–∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ —É–∂–µ –ø—Ä–æ—à–ª–æ, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
        }
        date = christmas;
        break;
      case 'birthday':
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const month = prompt('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è (1-12):');
        const day = prompt('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (1-31):');
        if (month && day) {
          const currentYear = new Date().getFullYear();
          date = new Date(currentYear, parseInt(month) - 1, parseInt(day));
          if (date < new Date()) {
            date.setFullYear(currentYear + 1);
          }
        } else {
          return;
        }
        break;
      case 'summer':
        const currentYear2 = new Date().getFullYear();
        date = new Date(currentYear2, 5, 1); // 1 –∏—é–Ω—è
        if (date < new Date()) {
          date.setFullYear(currentYear2 + 1);
        }
        break;
      case 'vacation':
        // –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞
        date = new Date();
        date.setMonth(date.getMonth() + 3);
        break;
      case 'weekend':
        // –°–ª–µ–¥—É—é—â–∞—è –ø—è—Ç–Ω–∏—Ü–∞
        date = new Date();
        const daysUntilFriday = (5 - date.getDay() + 7) % 7;
        if (daysUntilFriday === 0) {
          date.setDate(date.getDate() + 7); // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é
        } else {
          date.setDate(date.getDate() + daysUntilFriday);
        }
        break;
      default:
        return;
    }

    const dateString = date.toISOString().split('T')[0];
    setTargetDate(dateString);
    calculateDaysUntil(dateString);
  };

  const getPresetDescription = (preset: string) => {
    switch (preset) {
      case 'newyear':
        return '–¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞';
      case 'christmas':
        return '–¥–æ –†–æ–∂–¥–µ—Å—Ç–≤–∞';
      case 'birthday':
        return '–¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è';
      case 'summer':
        return '–¥–æ –ª–µ—Ç–∞';
      case 'vacation':
        return '–¥–æ –æ—Ç–ø—É—Å–∫–∞ (—á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞)';
      case 'weekend':
        return '–¥–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö';
      default:
        return '';
    }
  };

  const getResultDescription = (days: number) => {
    if (days === 0) return '–≠—Ç–æ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!';
    if (days === 1) return '–≠—Ç–æ —É–∂–µ –∑–∞–≤—Ç—Ä–∞!';
    if (days === -1) return '–≠—Ç–æ –±—ã–ª –≤—á–µ—Ä–∞';
    if (days === 7) return '–≠—Ç–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é';
    if (days === 30) return '–ï—â–µ –º–µ—Å—è—Ü';
    if (days === 365) return '–ï—â–µ –≥–æ–¥';

    if (days > 0) {
      if (days < 7) return `–ï—â–µ ${days} ${getDayWord(days)}`;
      if (days < 30)
        return `–ï—â–µ ${Math.floor(days / 7)} ${getWeekWord(
          Math.floor(days / 7)
        )}`;
      if (days < 365)
        return `–ï—â–µ ${Math.floor(days / 30)} ${getMonthWord(
          Math.floor(days / 30)
        )}`;
      return `–ï—â–µ ${Math.floor(days / 365)} ${getYearWord(
        Math.floor(days / 365)
      )}`;
    } else {
      const absDays = Math.abs(days);
      if (absDays < 7) return `${absDays} ${getDayWord(absDays)} –Ω–∞–∑–∞–¥`;
      if (absDays < 30)
        return `${Math.floor(absDays / 7)} ${getWeekWord(
          Math.floor(absDays / 7)
        )} –Ω–∞–∑–∞–¥`;
      if (absDays < 365)
        return `${Math.floor(absDays / 30)} ${getMonthWord(
          Math.floor(absDays / 30)
        )} –Ω–∞–∑–∞–¥`;
      return `${Math.floor(absDays / 365)} ${getYearWord(
        Math.floor(absDays / 365)
      )} –Ω–∞–∑–∞–¥`;
    }
  };

  const getDayWord = (days: number) => {
    if (days === 1) return '–¥–µ–Ω—å';
    if (days < 5) return '–¥–Ω—è';
    return '–¥–Ω–µ–π';
  };

  const getWeekWord = (weeks: number) => {
    if (weeks === 1) return '–Ω–µ–¥–µ–ª—è';
    if (weeks < 5) return '–Ω–µ–¥–µ–ª–∏';
    return '–Ω–µ–¥–µ–ª—å';
  };

  const getMonthWord = (months: number) => {
    if (months === 1) return '–º–µ—Å—è—Ü';
    if (months < 5) return '–º–µ—Å—è—Ü–∞';
    return '–º–µ—Å—è—Ü–µ–≤';
  };

  const getYearWord = (years: number) => {
    if (years === 1) return '–≥–æ–¥';
    if (years < 5) return '–≥–æ–¥–∞';
    return '–ª–µ—Ç';
  };

  const getEmbedUrl = () => {
    if (!targetDate) return '';
    const baseUrl = window.location.origin;
    return `${baseUrl}/embed/other/days-until?date=${targetDate}&preset=${preset}`;
  };

  const copyEmbedUrl = async () => {
    const url = getEmbedUrl();
    if (url) {
      try {
        await navigator.clipboard.writeText(url);
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      } catch (err) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = url;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      }
    }
  };

  return (
    <div className={`${styles.calculator} dateCalculator`}>
      <div className="calculatorHeader">
        <h2>‚è∞ –°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π {getPresetDescription(preset)}</h2>
        {!isEmbedded && (
          <p>
            –£–∑–Ω–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ
            –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É.
          </p>
        )}
      </div>

      {!isEmbedded && (
        <form className="calculatorForm" onSubmit={handleSubmit}>
          <div className="inputGroup">
            <label>–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã</label>
            <div className={styles.presetButtons}>
              {[
                {
                  key: 'newyear',
                  label: 'üéÜ –ù–æ–≤—ã–π –≥–æ–¥',
                  color: 'var(--primary-500)',
                },
                {
                  key: 'christmas',
                  label: 'üéÑ –†–æ–∂–¥–µ—Å—Ç–≤–æ',
                  color: 'var(--success-500)',
                },
                {
                  key: 'summer',
                  label: '‚òÄÔ∏è –õ–µ—Ç–æ',
                  color: 'var(--warning-500)',
                },
                {
                  key: 'weekend',
                  label: 'üéâ –í—ã—Ö–æ–¥–Ω—ã–µ',
                  color: 'var(--accent-500)',
                },
              ].map((preset) => (
                <button
                  key={preset.key}
                  type="button"
                  onClick={() => setPresetDate(preset.key)}
                  style={{
                    background: preset.color,
                    color: 'white',
                    border: 'none',
                    padding: '0.5rem 1rem',
                    borderRadius: 'var(--radius-md)',
                    fontSize: '0.9rem',
                    cursor: 'pointer',
                    margin: '0.25rem',
                    transition: 'all var(--transition-normal)',
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'scale(1.05)';
                    e.currentTarget.style.boxShadow = 'var(--shadow-md)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'scale(1)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                >
                  {preset.label}
                </button>
              ))}
            </div>
          </div>

          <div className="inputGroup">
            <label htmlFor="targetDate">–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É</label>
            <input
              id="targetDate"
              type="date"
              value={targetDate}
              onChange={(e) => setTargetDate(e.target.value)}
            />
          </div>

          {error && <div className="error">{error}</div>}
          {!isEmbedded && (
            <div className="inputGroup">
              <button type="submit" className="calculateBtn">
                –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏
              </button>
            </div>
          )}
        </form>
      )}

      {result !== null && (
        <div className="result dateResult">
          <div className="resultValue">
            <span className="amount">{Math.abs(result)}</span>
            <span className="unit">{getDayWord(Math.abs(result))}</span>
            <span className="unit"> {getPresetDescription(preset)}</span>
          </div>
          <p className="recommendation">{getResultDescription(result)}</p>

          {!isEmbedded && (
            <div className={styles.embedSection}>
              <h4>–í—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ —Å–∞–π—Ç</h4>
              <p>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –Ω–∞ –≤–∞—à —Å–∞–π—Ç:</p>
              <div className={styles.embedUrl}>
                <input
                  type="text"
                  value={getEmbedUrl()}
                  readOnly
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid var(--gray-200)',
                    borderRadius: 'var(--radius-md)',
                    fontSize: '0.9rem',
                    marginBottom: '0.5rem',
                  }}
                />
                <button
                  type="button"
                  onClick={copyEmbedUrl}
                  style={{
                    background: 'var(--accent-500)',
                    color: 'white',
                    border: 'none',
                    padding: '0.5rem 1rem',
                    borderRadius: 'var(--radius-md)',
                    cursor: 'pointer',
                    fontSize: '0.9rem',
                  }}
                >
                  üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                </button>
              </div>
            </div>
          )}
        </div>
      )}

      {!isEmbedded && (
        <div className="inputGroup" style={{ marginTop: '2rem' }}>
          <button
            type="button"
            onClick={clearForm}
            className="calculateBtn"
            style={{ background: 'var(--gray-500)' }}
          >
            –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
          </button>
        </div>
      )}
    </div>
  );
};

export default DaysUntilCalculator;

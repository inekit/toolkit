import React, { useState } from 'react';
import styles from './UnitConverter.module.scss';

interface ConversionCategory {
  id: string;
  name: string;
  icon: string;
  units: ConversionUnit[];
}

interface ConversionUnit {
  id: string;
  name: string;
  symbol: string;
  toBase: (value: number) => number;
  fromBase: (value: number) => number;
}

const UnitConverter: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState('length');
  const [fromUnit, setFromUnit] = useState('');
  const [toUnit, setToUnit] = useState('');
  const [fromValue, setFromValue] = useState('');
  const [result, setResult] = useState<number | null>(null);
  const [error, setError] = useState('');

  const conversionCategories: ConversionCategory[] = [
    {
      id: 'length',
      name: '–î–ª–∏–Ω–∞',
      icon: 'üìè',
      units: [
        {
          id: 'mm',
          name: '–ú–∏–ª–ª–∏–º–µ—Ç—Ä',
          symbol: '–º–º',
          toBase: (v) => v / 1000,
          fromBase: (v) => v * 1000,
        },
        {
          id: 'cm',
          name: '–°–∞–Ω—Ç–∏–º–µ—Ç—Ä',
          symbol: '—Å–º',
          toBase: (v) => v / 100,
          fromBase: (v) => v * 100,
        },
        {
          id: 'm',
          name: '–ú–µ—Ç—Ä',
          symbol: '–º',
          toBase: (v) => v,
          fromBase: (v) => v,
        },
        {
          id: 'km',
          name: '–ö–∏–ª–æ–º–µ—Ç—Ä',
          symbol: '–∫–º',
          toBase: (v) => v * 1000,
          fromBase: (v) => v / 1000,
        },
        {
          id: 'inch',
          name: '–î—é–π–º',
          symbol: '–¥—é–π–º',
          toBase: (v) => v * 0.0254,
          fromBase: (v) => v / 0.0254,
        },
        {
          id: 'ft',
          name: '–§—É—Ç',
          symbol: '—Ñ—É—Ç',
          toBase: (v) => v * 0.3048,
          fromBase: (v) => v / 0.3048,
        },
        {
          id: 'yd',
          name: '–Ø—Ä–¥',
          symbol: '—è—Ä–¥',
          toBase: (v) => v * 0.9144,
          fromBase: (v) => v / 0.9144,
        },
        {
          id: 'mile',
          name: '–ú–∏–ª—è',
          symbol: '–º–∏–ª—è',
          toBase: (v) => v * 1609.344,
          fromBase: (v) => v / 1609.344,
        },
      ],
    },
    {
      id: 'weight',
      name: '–í–µ—Å',
      icon: '‚öñÔ∏è',
      units: [
        {
          id: 'mg',
          name: '–ú–∏–ª–ª–∏–≥—Ä–∞–º–º',
          symbol: '–º–≥',
          toBase: (v) => v / 1000000,
          fromBase: (v) => v * 1000000,
        },
        {
          id: 'g',
          name: '–ì—Ä–∞–º–º',
          symbol: '–≥',
          toBase: (v) => v / 1000,
          fromBase: (v) => v * 1000,
        },
        {
          id: 'kg',
          name: '–ö–∏–ª–æ–≥—Ä–∞–º–º',
          symbol: '–∫–≥',
          toBase: (v) => v,
          fromBase: (v) => v,
        },
        {
          id: 't',
          name: '–¢–æ–Ω–Ω–∞',
          symbol: '—Ç',
          toBase: (v) => v * 1000,
          fromBase: (v) => v / 1000,
        },
        {
          id: 'oz',
          name: '–£–Ω—Ü–∏—è',
          symbol: '—É–Ω—Ü–∏—è',
          toBase: (v) => v * 0.0283495,
          fromBase: (v) => v / 0.0283495,
        },
        {
          id: 'lb',
          name: '–§—É–Ω—Ç',
          symbol: '—Ñ—É–Ω—Ç',
          toBase: (v) => v * 0.453592,
          fromBase: (v) => v / 0.453592,
        },
      ],
    },
    {
      id: 'area',
      name: '–ü–ª–æ—â–∞–¥—å',
      icon: 'üìê',
      units: [
        {
          id: 'mm2',
          name: '–ö–≤. –º–∏–ª–ª–∏–º–µ—Ç—Ä',
          symbol: '–º–º¬≤',
          toBase: (v) => v / 1000000,
          fromBase: (v) => v * 1000000,
        },
        {
          id: 'cm2',
          name: '–ö–≤. —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä',
          symbol: '—Å–º¬≤',
          toBase: (v) => v / 10000,
          fromBase: (v) => v * 10000,
        },
        {
          id: 'm2',
          name: '–ö–≤. –º–µ—Ç—Ä',
          symbol: '–º¬≤',
          toBase: (v) => v,
          fromBase: (v) => v,
        },
        {
          id: 'km2',
          name: '–ö–≤. –∫–∏–ª–æ–º–µ—Ç—Ä',
          symbol: '–∫–º¬≤',
          toBase: (v) => v * 1000000,
          fromBase: (v) => v / 1000000,
        },
        {
          id: 'ha',
          name: '–ì–µ–∫—Ç–∞—Ä',
          symbol: '–≥–∞',
          toBase: (v) => v * 10000,
          fromBase: (v) => v / 10000,
        },
        {
          id: 'acre',
          name: '–ê–∫—Ä',
          symbol: '–∞–∫—Ä',
          toBase: (v) => v * 4046.86,
          fromBase: (v) => v / 4046.86,
        },
      ],
    },
    {
      id: 'volume',
      name: '–û–±—ä–µ–º',
      icon: 'üß™',
      units: [
        {
          id: 'ml',
          name: '–ú–∏–ª–ª–∏–ª–∏—Ç—Ä',
          symbol: '–º–ª',
          toBase: (v) => v / 1000,
          fromBase: (v) => v * 1000,
        },
        {
          id: 'l',
          name: '–õ–∏—Ç—Ä',
          symbol: '–ª',
          toBase: (v) => v,
          fromBase: (v) => v,
        },
        {
          id: 'm3',
          name: '–ö—É–±. –º–µ—Ç—Ä',
          symbol: '–º¬≥',
          toBase: (v) => v * 1000,
          fromBase: (v) => v / 1000,
        },
        {
          id: 'gal',
          name: '–ì–∞–ª–ª–æ–Ω',
          symbol: '–≥–∞–ª–ª–æ–Ω',
          toBase: (v) => v * 3.78541,
          fromBase: (v) => v / 3.78541,
        },
        {
          id: 'pt',
          name: '–ü–∏–Ω—Ç–∞',
          symbol: '–ø–∏–Ω—Ç–∞',
          toBase: (v) => v * 0.473176,
          fromBase: (v) => v / 0.473176,
        },
      ],
    },
    {
      id: 'temperature',
      name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
      icon: 'üå°Ô∏è',
      units: [
        {
          id: 'c',
          name: '–¶–µ–ª—å—Å–∏–π',
          symbol: '¬∞C',
          toBase: (v) => v,
          fromBase: (v) => v,
        },
        {
          id: 'f',
          name: '–§–∞—Ä–µ–Ω–≥–µ–π—Ç',
          symbol: '¬∞F',
          toBase: (v) => ((v - 32) * 5) / 9,
          fromBase: (v) => (v * 9) / 5 + 32,
        },
        {
          id: 'k',
          name: '–ö–µ–ª—å–≤–∏–Ω',
          symbol: 'K',
          toBase: (v) => v - 273.15,
          fromBase: (v) => v + 273.15,
        },
      ],
    },
    {
      id: 'speed',
      name: '–°–∫–æ—Ä–æ—Å—Ç—å',
      icon: 'üèÉ',
      units: [
        {
          id: 'mps',
          name: '–ú/—Å',
          symbol: '–º/—Å',
          toBase: (v) => v,
          fromBase: (v) => v,
        },
        {
          id: 'kmh',
          name: '–ö–º/—á',
          symbol: '–∫–º/—á',
          toBase: (v) => v / 3.6,
          fromBase: (v) => v * 3.6,
        },
        {
          id: 'mph',
          name: '–ú–∏–ª—å/—á',
          symbol: '–º–∏–ª—å/—á',
          toBase: (v) => v * 0.44704,
          fromBase: (v) => v / 0.44704,
        },
        {
          id: 'knot',
          name: '–£–∑–µ–ª',
          symbol: '—É–∑–µ–ª',
          toBase: (v) => v * 0.514444,
          fromBase: (v) => v / 0.514444,
        },
      ],
    },
    {
      id: 'time',
      name: '–í—Ä–µ–º—è',
      icon: '‚è∞',
      units: [
        {
          id: 'sec',
          name: '–°–µ–∫—É–Ω–¥–∞',
          symbol: '—Å–µ–∫',
          toBase: (v) => v,
          fromBase: (v) => v,
        },
        {
          id: 'min',
          name: '–ú–∏–Ω—É—Ç–∞',
          symbol: '–º–∏–Ω',
          toBase: (v) => v * 60,
          fromBase: (v) => v / 60,
        },
        {
          id: 'hour',
          name: '–ß–∞—Å',
          symbol: '—á',
          toBase: (v) => v * 3600,
          fromBase: (v) => v / 3600,
        },
        {
          id: 'day',
          name: '–î–µ–Ω—å',
          symbol: '–¥–Ω',
          toBase: (v) => v * 86400,
          fromBase: (v) => v / 86400,
        },
        {
          id: 'week',
          name: '–ù–µ–¥–µ–ª—è',
          symbol: '–Ω–µ–¥',
          toBase: (v) => v * 604800,
          fromBase: (v) => v / 604800,
        },
        {
          id: 'month',
          name: '–ú–µ—Å—è—Ü',
          symbol: '–º–µ—Å',
          toBase: (v) => v * 2592000,
          fromBase: (v) => v / 2592000,
        },
        {
          id: 'year',
          name: '–ì–æ–¥',
          symbol: '–≥',
          toBase: (v) => v * 31536000,
          fromBase: (v) => v / 31536000,
        },
      ],
    },
  ];

  const currentCategory = conversionCategories.find(
    (cat) => cat.id === selectedCategory
  );

  const convert = () => {
    setError('');

    if (!fromUnit || !toUnit || !fromValue) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    const value = parseFloat(fromValue);
    if (isNaN(value)) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
      return;
    }

    const fromUnitObj = currentCategory?.units.find((u) => u.id === fromUnit);
    const toUnitObj = currentCategory?.units.find((u) => u.id === toUnit);

    if (!fromUnitObj || !toUnitObj) {
      setError('–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è');
      return;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É, –∑–∞—Ç–µ–º –≤ —Ü–µ–ª–µ–≤—É—é
    const baseValue = fromUnitObj.toBase(value);
    const resultValue = toUnitObj.fromBase(baseValue);

    setResult(resultValue);
  };

  const clearForm = () => {
    setFromValue('');
    setResult(null);
    setError('');
  };

  const swapUnits = () => {
    if (fromUnit && toUnit) {
      const temp = fromUnit;
      setFromUnit(toUnit);
      setToUnit(temp);
      if (result !== null) {
        setFromValue(result.toString());
        setResult(null);
      }
    }
  };

  const handleCategoryChange = (categoryId: string) => {
    setSelectedCategory(categoryId);
    setFromUnit('');
    setToUnit('');
    setFromValue('');
    setResult(null);
    setError('');
  };

  const getCategoryDescription = (categoryId: string) => {
    switch (categoryId) {
      case 'length':
        return '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –¥–ª–∏–Ω—ã';
      case 'weight':
        return '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –≤–µ—Å–∞';
      case 'area':
        return '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –ø–ª–æ—â–∞–¥–∏';
      case 'volume':
        return '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –æ–±—ä–µ–º–∞';
      case 'temperature':
        return '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —à–∫–∞–ª–∞–º–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã';
      case 'speed':
        return '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏';
      case 'time':
        return '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏';
      default:
        return '';
    }
  };

  return (
    <div className={`${styles.calculator} converterCalculator`}>
      <div className="calculatorHeader">
        <h2>üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω</h2>
        <p>
          –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
          –¥–ª–∏–Ω–∞, –≤–µ—Å, –ø–ª–æ—â–∞–¥—å, –æ–±—ä–µ–º, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è.
        </p>
      </div>

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          convert();
        }}
      >
        <div className="inputGroup">
          <label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
          <select
            id="category"
            value={selectedCategory}
            onChange={(e) => handleCategoryChange(e.target.value)}
          >
            {conversionCategories.map((category) => (
              <option key={category.id} value={category.id}>
                {category.icon} {category.name}
              </option>
            ))}
          </select>
          <div className="help">{getCategoryDescription(selectedCategory)}</div>
        </div>

        <div className="inputGroup">
          <label>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è</label>
          <div className={styles.conversionInputs}>
            <div>
              <label htmlFor="fromUnit">–ò–∑</label>
              <select
                id="fromUnit"
                value={fromUnit}
                onChange={(e) => setFromUnit(e.target.value)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É</option>
                {currentCategory?.units.map((unit) => (
                  <option key={unit.id} value={unit.id}>
                    {unit.name} ({unit.symbol})
                  </option>
                ))}
              </select>
            </div>

            <div className={styles.swapButton}>
              <button
                type="button"
                onClick={swapUnits}
                style={{
                  background: 'var(--accent-500)',
                  color: 'white',
                  border: 'none',
                  padding: '0.5rem',
                  borderRadius: '50%',
                  width: '2.5rem',
                  height: '2.5rem',
                  cursor: 'pointer',
                  fontSize: '1.2rem',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}
                title="–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏"
              >
                ‚áÑ
              </button>
            </div>

            <div>
              <label htmlFor="toUnit">–í</label>
              <select
                id="toUnit"
                value={toUnit}
                onChange={(e) => setToUnit(e.target.value)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É</option>
                {currentCategory?.units.map((unit) => (
                  <option key={unit.id} value={unit.id}>
                    {unit.name} ({unit.symbol})
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label htmlFor="fromValue">–ó–Ω–∞—á–µ–Ω–∏–µ</label>
          <input
            id="fromValue"
            type="number"
            value={fromValue}
            onChange={(e) => setFromValue(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            step="any"
          />
        </div>

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
          </button>
        </div>
      </form>

      {result !== null && (
        <div className="result conversionResult">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</h3>
          <div className="resultValue">
            <span className="amount">
              {result.toFixed(6).replace(/\.?0+$/, '')}
            </span>
            <span className="unit">
              {currentCategory?.units.find((u) => u.id === toUnit)?.symbol ||
                ''}
            </span>
          </div>

          <div className={styles.conversionDetails}>
            <p>
              <strong>{fromValue}</strong>{' '}
              {currentCategory?.units.find((u) => u.id === fromUnit)?.symbol} =
              <strong> {result.toFixed(6).replace(/\.?0+$/, '')}</strong>{' '}
              {currentCategory?.units.find((u) => u.id === toUnit)?.symbol}
            </p>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default UnitConverter;

import React, { useState } from 'react';
import styles from './MortgageCalculator.module.scss';

const MortgageCalculator: React.FC = () => {
  const [propertyPrice, setPropertyPrice] = useState('');
  const [downPayment, setDownPayment] = useState('');
  const [loanTerm, setLoanTerm] = useState('20');
  const [interestRate, setInterestRate] = useState('');
  const [paymentType, setPaymentType] = useState('annuity');
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState('');

  const calculateMortgage = () => {
    setError('');

    if (!propertyPrice || !downPayment || !interestRate) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    const price = parseFloat(propertyPrice);
    const down = parseFloat(downPayment);
    const term = parseInt(loanTerm);
    const rate = parseFloat(interestRate);

    if (isNaN(price) || isNaN(down) || isNaN(rate)) {
      setError('–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏');
      return;
    }

    if (price <= 0 || down < 0 || rate <= 0 || term <= 0) {
      setError('–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏');
      return;
    }

    if (down >= price) {
      setError(
        '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'
      );
      return;
    }

    if (rate > 30) {
      setError('–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è');
      return;
    }

    const loanAmount = price - down;
    const monthlyRate = rate / 100 / 12;
    const totalPayments = term * 12;

    let monthlyPayment = 0;
    let totalPayment = 0;
    let totalInterest = 0;

    if (paymentType === 'annuity') {
      // –ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
      monthlyPayment =
        (loanAmount *
          (monthlyRate * Math.pow(1 + monthlyRate, totalPayments))) /
        (Math.pow(1 + monthlyRate, totalPayments) - 1);
      totalPayment = monthlyPayment * totalPayments;
      totalInterest = totalPayment - loanAmount;
    } else {
      // –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
      const principalPayment = loanAmount / totalPayments;
      let totalInterestSum = 0;

      for (let i = 1; i <= totalPayments; i++) {
        const interestPayment =
          (loanAmount - principalPayment * (i - 1)) * monthlyRate;
        totalInterestSum += interestPayment;
      }

      monthlyPayment = principalPayment + loanAmount * monthlyRate;
      totalPayment = loanAmount + totalInterestSum;
      totalInterest = totalInterestSum;
    }

    // –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–µ—Ä–≤—ã–µ 12 –º–µ—Å—è—Ü–µ–≤)
    const paymentSchedule = [];
    if (paymentType === 'annuity') {
      for (let month = 1; month <= 12; month++) {
        const remainingBalance =
          (loanAmount *
            (Math.pow(1 + monthlyRate, totalPayments) -
              Math.pow(1 + monthlyRate, month))) /
          (Math.pow(1 + monthlyRate, totalPayments) - 1);
        const interestPayment = remainingBalance * monthlyRate;
        const principalPayment = monthlyPayment - interestPayment;

        paymentSchedule.push({
          month,
          payment: monthlyPayment.toFixed(2),
          principal: principalPayment.toFixed(2),
          interest: interestPayment.toFixed(2),
          balance: remainingBalance.toFixed(2),
        });
      }
    } else {
      for (let month = 1; month <= 12; month++) {
        const remainingBalance =
          loanAmount - (loanAmount / totalPayments) * month;
        const interestPayment = remainingBalance * monthlyRate;
        const principalPayment = loanAmount / totalPayments;
        const totalMonthlyPayment = principalPayment + interestPayment;

        paymentSchedule.push({
          month,
          payment: totalMonthlyPayment.toFixed(2),
          principal: principalPayment.toFixed(2),
          interest: interestPayment.toFixed(2),
          balance: remainingBalance.toFixed(2),
        });
      }
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    const affordability = analyzeAffordability(monthlyPayment, price, down);

    setResult({
      propertyPrice: price.toFixed(0),
      downPayment: down.toFixed(0),
      loanAmount: loanAmount.toFixed(0),
      loanTerm: term,
      interestRate: rate.toFixed(2),
      paymentType: getPaymentTypeName(paymentType),
      monthlyPayment: monthlyPayment.toFixed(2),
      totalPayment: totalPayment.toFixed(0),
      totalInterest: totalInterest.toFixed(0),
      paymentSchedule,
      affordability,
      recommendations: getMortgageRecommendations(
        price,
        down,
        rate,
        term,
        paymentType
      ),
    });
  };

  const analyzeAffordability = (
    monthlyPayment: number,
    propertyPrice: number,
    downPayment: number
  ) => {
    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è –∏–ø–æ—Ç–µ–∫–∏ (30% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂–∏)
    const recommendedIncome = (monthlyPayment * 12) / 0.3;

    // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∫ –¥–æ—Ö–æ–¥—É
    const paymentToIncomeRatio = (monthlyPayment * 12) / recommendedIncome;

    // –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    let affordability = '';
    if (paymentToIncomeRatio <= 0.25) affordability = '–û—Ç–ª–∏—á–Ω–∞—è';
    else if (paymentToIncomeRatio <= 0.3) affordability = '–•–æ—Ä–æ—à–∞—è';
    else if (paymentToIncomeRatio <= 0.35) affordability = '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è';
    else affordability = '–ü–ª–æ—Ö–∞—è';

    return {
      recommendedIncome: recommendedIncome.toFixed(0),
      paymentToIncomeRatio: (paymentToIncomeRatio * 100).toFixed(1),
      affordability,
    };
  };

  const getMortgageRecommendations = (
    price: number,
    down: number,
    rate: number,
    term: number,
    paymentType: string
  ): string[] => {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É –≤–∑–Ω–æ—Å—É
    const downPaymentRatio = (down / price) * 100;
    if (downPaymentRatio < 20) {
      recommendations.push(
        '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –º–µ–Ω–µ–µ 20% - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∏–ø–æ—Ç–µ–∫–∏'
      );
    } else if (downPaymentRatio >= 30) {
      recommendations.push(
        '–û—Ç–ª–∏—á–Ω—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å - —ç—Ç–æ —Å–Ω–∏–∑–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É'
      );
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ
    if (rate > 15) {
      recommendations.push(
        '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º'
      );
    } else if (rate < 8) {
      recommendations.push(
        '–ù–∏–∑–∫–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏–ø–æ—Ç–µ–∫–∏'
      );
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ä–æ–∫—É –∫—Ä–µ–¥–∏—Ç–∞
    if (term > 25) {
      recommendations.push('–î–ª–∏–Ω–Ω—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ —É–≤–µ–ª–∏—á–∏—Ç –æ–±—â—É—é –ø–µ—Ä–µ–ø–ª–∞—Ç—É');
    } else if (term < 15) {
      recommendations.push(
        '–ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ —Å–Ω–∏–∑–∏—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—É, –Ω–æ —É–≤–µ–ª–∏—á–∏—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂'
      );
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –ø–ª–∞—Ç–µ–∂–∞
    if (paymentType === 'annuity') {
      recommendations.push(
        '–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã'
      );
    } else {
      recommendations.push(
        '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º'
      );
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.push(
      '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –Ω–∞–ª–æ–≥–∏, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏'
    );
    recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥ –Ω–∞ 3-6 –º–µ—Å—è—Ü–µ–≤ –ø–ª–∞—Ç–µ–∂–µ–π');
    recommendations.push(
      '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞—Ç—ã'
    );

    return recommendations;
  };

  const clearForm = () => {
    setPropertyPrice('');
    setDownPayment('');
    setLoanTerm('20');
    setInterestRate('');
    setPaymentType('annuity');
    setResult(null);
    setError('');
  };

  const getPaymentTypeName = (type: string): string => {
    switch (type) {
      case 'annuity':
        return '–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π';
      case 'differential':
        return '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π';
      default:
        return '–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π';
    }
  };

  return (
    <div className={`${styles.calculator} mortgageCalculator`}>
      <div className="calculatorHeader">
        <h2>üè† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–ø–æ—Ç–µ–∫–∏</h2>
        <p>
          –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏, –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≥—Ä–∞—Ñ–∏–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è
          –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞.
        </p>
      </div>

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          calculateMortgage();
        }}
      >
        <div className="inputGroup">
          <label>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</label>
          <div className="inputGrid">
            <div>
              <label htmlFor="propertyPrice">–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (‚ÇΩ)</label>
              <input
                id="propertyPrice"
                type="number"
                value={propertyPrice}
                onChange={(e) => setPropertyPrice(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 5000000"
                step="100000"
                min="100000"
                max="100000000"
              />
            </div>
            <div>
              <label htmlFor="downPayment">–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å (‚ÇΩ)</label>
              <input
                id="downPayment"
                type="number"
                value={downPayment}
                onChange={(e) => setDownPayment(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1000000"
                step="100000"
                min="0"
                max="50000000"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–£—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–∞</label>
          <div className="inputRow">
            <div>
              <label htmlFor="loanTerm">–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)</label>
              <select
                id="loanTerm"
                value={loanTerm}
                onChange={(e) => setLoanTerm(e.target.value)}
              >
                <option value="5">5 –ª–µ—Ç</option>
                <option value="10">10 –ª–µ—Ç</option>
                <option value="15">15 –ª–µ—Ç</option>
                <option value="20">20 –ª–µ—Ç</option>
                <option value="25">25 –ª–µ—Ç</option>
                <option value="30">30 –ª–µ—Ç</option>
              </select>
            </div>
            <div>
              <label htmlFor="interestRate">
                –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (% –≥–æ–¥–æ–≤—ã—Ö)
              </label>
              <input
                id="interestRate"
                type="number"
                value={interestRate}
                onChange={(e) => setInterestRate(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 12.5"
                step="0.1"
                min="1"
                max="30"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label htmlFor="paymentType">–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞</label>
          <select
            id="paymentType"
            value={paymentType}
            onChange={(e) => setPaymentType(e.target.value)}
          >
            <option value="annuity">–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π (—Ä–∞–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)</option>
            <option value="differential">
              –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (—É–º–µ–Ω—å—à–∞—é—â–∏–µ—Å—è –ø–ª–∞—Ç–µ–∂–∏)
            </option>
          </select>
          <div className="help">
            {paymentType === 'annuity'
              ? '–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π - —Ä–∞–≤–Ω—ã–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏'
              : '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –ø–ª–∞—Ç–µ–∂–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º'}
          </div>
        </div>

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É
          </button>
        </div>
      </form>

      {result && (
        <div className="result">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>

          <div className={styles.mortgageSummary}>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</span>
              <span className={styles.value}>{result.propertyPrice} ‚ÇΩ</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å:</span>
              <span className={styles.value}>{result.downPayment} ‚ÇΩ</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:</span>
              <span className={styles.value}>{result.loanAmount} ‚ÇΩ</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞:</span>
              <span className={styles.value}>{result.loanTerm} –ª–µ—Ç</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</span>
              <span className={styles.value}>{result.interestRate}%</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞:</span>
              <span className={styles.value}>{result.paymentType}</span>
            </div>
          </div>

          <div className={styles.resultValue}>
            <span className={styles.amount}>{result.monthlyPayment}</span>
            <span className={styles.unit}>‚ÇΩ –≤ –º–µ—Å—è—Ü</span>
          </div>

          <div className={styles.paymentDetails}>
            <h4>–î–µ—Ç–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç–∞:</h4>
            <div className={styles.detailsGrid}>
              <div className={styles.detailItem}>
                <span className={styles.label}>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:</span>
                <span className={styles.value}>{result.monthlyPayment} ‚ÇΩ</span>
              </div>
              <div className={styles.detailItem}>
                <span className={styles.label}>–û–±—â–∞—è —Å—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É:</span>
                <span className={styles.value}>{result.totalPayment} ‚ÇΩ</span>
              </div>
              <div className={styles.detailItem}>
                <span className={styles.label}>–û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞:</span>
                <span className={styles.value}>{result.totalInterest} ‚ÇΩ</span>
              </div>
            </div>
          </div>

          <div className={styles.affordabilityAnalysis}>
            <h4>–ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</h4>
            <div className={styles.affordabilityGrid}>
              <div className={styles.affordabilityItem}>
                <span className={styles.label}>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–æ—Ö–æ–¥:</span>
                <span className={styles.value}>
                  {result.affordability.recommendedIncome} ‚ÇΩ/–≥–æ–¥
                </span>
              </div>
              <div className={styles.affordabilityItem}>
                <span className={styles.label}>–ü–ª–∞—Ç–µ–∂ –∫ –¥–æ—Ö–æ–¥—É:</span>
                <span className={styles.value}>
                  {result.affordability.paymentToIncomeRatio}%
                </span>
              </div>
              <div className={styles.affordabilityItem}>
                <span className={styles.label}>–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:</span>
                <span className={styles.value}>
                  {result.affordability.affordability}
                </span>
              </div>
            </div>
          </div>

          <div className={styles.paymentSchedule}>
            <h4>–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–µ—Ä–≤—ã–µ 12 –º–µ—Å—è—Ü–µ–≤):</h4>
            <div className={styles.scheduleTable}>
              <table>
                <thead>
                  <tr>
                    <th>–ú–µ—Å—è—Ü</th>
                    <th>–ü–ª–∞—Ç–µ–∂ (‚ÇΩ)</th>
                    <th>–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥ (‚ÇΩ)</th>
                    <th>–ü—Ä–æ—Ü–µ–Ω—Ç—ã (‚ÇΩ)</th>
                    <th>–û—Å—Ç–∞—Ç–æ–∫ (‚ÇΩ)</th>
                  </tr>
                </thead>
                <tbody>
                  {result.paymentSchedule.map((payment: any) => (
                    <tr key={payment.month}>
                      <td>{payment.month}</td>
                      <td>{payment.payment}</td>
                      <td>{payment.principal}</td>
                      <td>{payment.interest}</td>
                      <td>{payment.balance}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          <div className={styles.recommendation}>
            <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
            <ul className={styles.recommendationsList}>
              {result.recommendations.map((rec: string, index: number) => (
                <li key={index}>{rec}</li>
              ))}
            </ul>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default MortgageCalculator;

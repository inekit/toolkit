import React, { useState } from 'react';
import styles from './SpokeCalculator.module.scss';

const SpokeCalculator: React.FC = () => {
  const [spokeCount, setSpokeCount] = useState('');
  const [crossPattern, setCrossPattern] = useState('3');
  const [result, setResult] = useState<number[] | null>(null);
  const [error, setError] = useState('');

  const calculateSpokePattern = () => {
    setError('');

    if (!spokeCount) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü');
      return;
    }

    const count = parseInt(spokeCount);
    if (isNaN(count) || count < 12 || count > 48) {
      setError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 12 –¥–æ 48');
      return;
    }

    if (count % 2 !== 0) {
      setError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º');
      return;
    }

    const cross = parseInt(crossPattern);
    if (isNaN(cross) || cross < 1 || cross > 5) {
      setError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–µ—Ä–µ–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—è
    const pattern: number[] = [];
    const halfSpokes = count / 2;

    for (let i = 0; i < count; i++) {
      let spokeNumber: number;

      if (i < halfSpokes) {
        // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≤–µ–¥—É—â–∞—è)
        spokeNumber = i + 1;
      } else {
        // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≤–µ–¥–æ–º–∞—è)
        const rightIndex = i - halfSpokes;
        spokeNumber = rightIndex + 1;
      }

      pattern.push(spokeNumber);
    }

    setResult(pattern);
  };

  const clearForm = () => {
    setSpokeCount('');
    setCrossPattern('3');
    setResult(null);
    setError('');
  };

  const getCrossDescription = (cross: string) => {
    switch (cross) {
      case '1':
        return '1x (–æ–¥–∏–Ω –∫—Ä–µ—Å—Ç) - –¥–ª—è —Ç—Ä–µ–∫–æ–≤—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤';
      case '2':
        return '2x (–¥–≤–∞ –∫—Ä–µ—Å—Ç–∞) - –¥–ª—è —à–æ—Å—Å–µ–π–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤';
      case '3':
        return '3x (—Ç—Ä–∏ –∫—Ä–µ—Å—Ç–∞) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω';
      case '4':
        return '4x (—á–µ—Ç—ã—Ä–µ –∫—Ä–µ—Å—Ç–∞) - –¥–ª—è –≥–æ—Ä–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤';
      case '5':
        return '5x (–ø—è—Ç—å –∫—Ä–µ—Å—Ç–æ–≤) - –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö —É—Å–ª–æ–≤–∏–π';
      default:
        return '';
    }
  };

  const getSpokeLength = (spokeCount: number, crossPattern: number) => {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏–Ω—ã —Å–ø–∏—Ü
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å ERD –æ–±–æ–¥–∞, PCD –≤—Ç—É–ª–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const baseLength = 260; // –º–º
    const crossAdjustment = crossPattern * 2;
    const countAdjustment = (spokeCount - 32) * 0.5;

    return Math.round(baseLength + crossAdjustment + countAdjustment);
  };

  return (
    <div className={`${styles.calculator} spokeCalculator`}>
      <div className="calculatorHeader">
        <h2>üö¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—è</h2>
        <p>
          –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω–æ–≥–æ –∫–æ–ª–µ—Å–∞. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ
          –ø–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∏—Ü –∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–ª–∏–Ω—É.
        </p>
      </div>

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          calculateSpokePattern();
        }}
      >
        <div className="inputGroup">
          <label htmlFor="spokeCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü</label>
          <input
            id="spokeCount"
            type="number"
            value={spokeCount}
            onChange={(e) => setSpokeCount(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 32"
            min="12"
            max="48"
            step="2"
          />
          <div className="help">–û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 28, 32, 36 –∏–ª–∏ 48 —Å–ø–∏—Ü</div>
        </div>

        <div className="inputGroup">
          <label htmlFor="crossPattern">–ü–∞—Ç—Ç–µ—Ä–Ω –ø–µ—Ä–µ–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è</label>
          <select
            id="crossPattern"
            value={crossPattern}
            onChange={(e) => setCrossPattern(e.target.value)}
          >
            <option value="1">1x (–æ–¥–∏–Ω –∫—Ä–µ—Å—Ç)</option>
            <option value="2">2x (–¥–≤–∞ –∫—Ä–µ—Å—Ç–∞)</option>
            <option value="3">3x (—Ç—Ä–∏ –∫—Ä–µ—Å—Ç–∞)</option>
            <option value="4">4x (—á–µ—Ç—ã—Ä–µ –∫—Ä–µ—Å—Ç–∞)</option>
            <option value="5">5x (–ø—è—Ç—å –∫—Ä–µ—Å—Ç–æ–≤)</option>
          </select>
          <div className="help">{getCrossDescription(crossPattern)}</div>
        </div>

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω
          </button>
        </div>
      </form>

      {result && (
        <div className="result">
          <h3>–ü–∞—Ç—Ç–µ—Ä–Ω —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—è</h3>
          <div className="resultValue">
            <span className="amount">{spokeCount}</span>
            <span className="unit">—Å–ø–∏—Ü</span>
          </div>

          <div className="spokePattern">
            <h4>–ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∏—Ü:</h4>
            <div className="pattern">
              {result.map((spoke, index) => (
                <span
                  key={index}
                  style={{
                    display: 'inline-block',
                    margin: '0 0.25rem',
                    padding: '0.25rem 0.5rem',
                    background:
                      index < parseInt(spokeCount) / 2
                        ? 'var(--primary-100)'
                        : 'var(--accent-100)',
                    borderRadius: 'var(--radius-sm)',
                    fontSize: '0.9rem',
                    fontWeight: '600',
                  }}
                >
                  {spoke}
                </span>
              ))}
            </div>
            <p
              style={{
                marginTop: '1rem',
                fontSize: '0.9rem',
                color: 'var(--gray-600)',
              }}
            >
              <span style={{ color: 'var(--primary-600)' }}>üîµ</span> - –ª–µ–≤–∞—è
              —Å—Ç–æ—Ä–æ–Ω–∞ (–≤–µ–¥—É—â–∞—è),
              <span style={{ color: 'var(--accent-600)' }}>üü°</span> - –ø—Ä–∞–≤–∞—è
              —Å—Ç–æ—Ä–æ–Ω–∞ (–≤–µ–¥–æ–º–∞—è)
            </p>
          </div>

          <div className="recommendation">
            <strong>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–ø–∏—Ü:</strong>{' '}
            {getSpokeLength(parseInt(spokeCount), parseInt(crossPattern))} –º–º
            <br />
            <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏–Ω—ã —Å–ø–∏—Ü
            –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã —Å —É—á–µ—Ç–æ–º ERD –æ–±–æ–¥–∞ –∏ PCD
            –≤—Ç—É–ª–∫–∏.
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default SpokeCalculator;

import React, { useState } from 'react';
import styles from './SpokeCalculator.module.scss';

interface SpokePattern {
  leftSide: number[];
  rightSide: number[];
  crossPattern: number;
  spokeLength: number;
  tension: string;
  difficulty: string;
}

interface WheelSpecs {
  erd: number; // Effective Rim Diameter
  pcd: number; // Pitch Circle Diameter
  flangeOffset: number;
  hubWidth: number;
}

const SpokeCalculator: React.FC = () => {
  const [spokeCount, setSpokeCount] = useState('');
  const [crossPattern, setCrossPattern] = useState('3');
  const [wheelType, setWheelType] = useState('road');
  const [useAdvanced, setUseAdvanced] = useState(false);
  const [wheelSpecs, setWheelSpecs] = useState<WheelSpecs>({
    erd: 622,
    pcd: 44,
    flangeOffset: 35,
    hubWidth: 100,
  });
  const [result, setResult] = useState<SpokePattern | null>(null);
  const [error, setError] = useState('');
  const [showTutorial, setShowTutorial] = useState(false);

  const wheelTypes = {
    road: {
      name: '–®–æ—Å—Å–µ–π–Ω—ã–π',
      erd: 622,
      pcd: 44,
      flangeOffset: 35,
      hubWidth: 100,
    },
    mtb: { name: '–ì–æ—Ä–Ω—ã–π', erd: 559, pcd: 44, flangeOffset: 35, hubWidth: 135 },
    track: {
      name: '–¢—Ä–µ–∫–æ–≤—ã–π',
      erd: 622,
      pcd: 44,
      flangeOffset: 35,
      hubWidth: 120,
    },
    bmx: { name: 'BMX', erd: 406, pcd: 36, flangeOffset: 30, hubWidth: 110 },
    cruiser: {
      name: '–ö—Ä—É–∏–∑–µ—Ä',
      erd: 622,
      pcd: 44,
      flangeOffset: 35,
      hubWidth: 120,
    },
    custom: {
      name: '–ö–∞—Å—Ç–æ–º–Ω—ã–π',
      erd: 622,
      pcd: 44,
      flangeOffset: 35,
      hubWidth: 100,
    },
  };

  const calculateSpokePattern = () => {
    setError('');

    if (!spokeCount) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü');
      return;
    }

    const count = parseInt(spokeCount);
    if (isNaN(count) || count < 12 || count > 48) {
      setError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 12 –¥–æ 48');
      return;
    }

    if (count % 2 !== 0) {
      setError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º');
      return;
    }

    const cross = parseInt(crossPattern);
    if (isNaN(cross) || cross < 1 || cross > 5) {
      setError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–µ—Ä–µ–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ø–∏—Ü
    if (cross * 2 >= count / 2) {
      setError(
        `–ü–∞—Ç—Ç–µ—Ä–Ω ${cross}x –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ${count} —Å–ø–∏—Ü. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: ${Math.floor(
          (count / 2 - 1) / 2
        )}x`
      );
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—è
    const leftSide: number[] = [];
    const rightSide: number[] = [];
    const halfSpokes = count / 2;

    // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≤–µ–¥—É—â–∞—è)
    for (let i = 0; i < halfSpokes; i++) {
      leftSide.push(i + 1);
    }

    // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≤–µ–¥–æ–º–∞—è) —Å —É—á–µ—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è
    for (let i = 0; i < halfSpokes; i++) {
      const spokeNumber = i + 1;
      rightSide.push(spokeNumber);
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—É—é –¥–ª–∏–Ω—É —Å–ø–∏—Ü
    const spokeLength = calculateExactSpokeLength(count, cross, wheelSpecs);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞—Ç—è–∂–µ–Ω–∏–µ
    const tension = getTensionLevel(count, cross, wheelType);
    const difficulty = getDifficultyLevel(count, cross);

    setResult({
      leftSide,
      rightSide,
      crossPattern: cross,
      spokeLength,
      tension,
      difficulty,
    });
  };

  const calculateExactSpokeLength = (
    spokeCount: number,
    crossPattern: number,
    specs: WheelSpecs
  ): number => {
    // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏–Ω—ã —Å–ø–∏—Ü
    const erd = specs.erd;
    const pcd = specs.pcd;
    const flangeOffset = specs.flangeOffset;
    const hubWidth = specs.hubWidth;

    // –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞
    const baseLength =
      Math.sqrt(
        Math.pow(erd / 2, 2) + Math.pow(pcd / 2, 2) + Math.pow(flangeOffset, 2)
      ) -
      pcd / 2;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω –ø–µ—Ä–µ–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è
    const crossAdjustment = crossPattern * 2;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü
    const countAdjustment = (spokeCount - 32) * 0.3;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —à–∏—Ä–∏–Ω—É –≤—Ç—É–ª–∫–∏
    const hubAdjustment = (hubWidth - 100) * 0.1;

    return Math.round(
      baseLength + crossAdjustment + countAdjustment + hubAdjustment
    );
  };

  const getTensionLevel = (
    spokeCount: number,
    crossPattern: number,
    wheelType: string
  ): string => {
    const tensionScore = spokeCount * crossPattern;

    if (wheelType === 'track') return '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ';
    if (tensionScore >= 120) return '–í—ã—Å–æ–∫–æ–µ';
    if (tensionScore >= 80) return '–°—Ä–µ–¥–Ω–µ–µ';
    return '–ù–∏–∑–∫–æ–µ';
  };

  const getDifficultyLevel = (
    spokeCount: number,
    crossPattern: number
  ): string => {
    const difficultyScore = spokeCount * crossPattern;

    if (difficultyScore >= 150) return '–≠–∫—Å–ø–µ—Ä—Ç';
    if (difficultyScore >= 100) return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
    if (difficultyScore >= 60) return '–°—Ä–µ–¥–Ω–∏–π';
    return '–ù–æ–≤–∏—á–æ–∫';
  };

  const getCrossDescription = (cross: string) => {
    switch (cross) {
      case '1':
        return '1x (–æ–¥–∏–Ω –∫—Ä–µ—Å—Ç) - –¥–ª—è —Ç—Ä–µ–∫–æ–≤—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ';
      case '2':
        return '2x (–¥–≤–∞ –∫—Ä–µ—Å—Ç–∞) - –¥–ª—è —à–æ—Å—Å–µ–π–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤, —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å';
      case '3':
        return '3x (—Ç—Ä–∏ –∫—Ä–µ—Å—Ç–∞) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π';
      case '4':
        return '4x (—á–µ—Ç—ã—Ä–µ –∫—Ä–µ—Å—Ç–∞) - –¥–ª—è –≥–æ—Ä–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤, –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å';
      case '5':
        return '5x (–ø—è—Ç—å –∫—Ä–µ—Å—Ç–æ–≤) - –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö —É—Å–ª–æ–≤–∏–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å';
      default:
        return '';
    }
  };

  const getWheelTypeDescription = (type: string) => {
    return wheelTypes[type as keyof typeof wheelTypes]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  const updateWheelSpecs = (field: keyof WheelSpecs, value: number) => {
    setWheelSpecs((prev) => ({ ...prev, [field]: value }));
  };

  const selectWheelType = (type: string) => {
    setWheelType(type);
    if (type !== 'custom') {
      const specs = wheelTypes[type as keyof typeof wheelTypes];
      setWheelSpecs(specs);
    }
  };

  const clearForm = () => {
    setSpokeCount('');
    setCrossPattern('3');
    setWheelType('road');
    setUseAdvanced(false);
    setWheelSpecs(wheelTypes.road);
    setResult(null);
    setError('');
  };

  return (
    <div className={`${styles.calculator} spokeCalculator`}>
      <div className="calculatorHeader">
        <h2>üö¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—è</h2>
        <p>
          –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—è
          –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω–æ–≥–æ –∫–æ–ª–µ—Å–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö
          –º–µ—Ö–∞–Ω–∏–∫–æ–≤.
        </p>

        <button
          type="button"
          className={styles.tutorialBtn}
          onClick={() => setShowTutorial(!showTutorial)}
        >
          {showTutorial ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
        </button>
      </div>

      {showTutorial && (
        <div className={styles.tutorial}>
          <h3>üìö –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—é</h3>
          <div className={styles.tutorialContent}>
            <div className={styles.tutorialSection}>
              <h4>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:</h4>
              <ul>
                <li>
                  <strong>ERD (Effective Rim Diameter)</strong> - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π
                  –¥–∏–∞–º–µ—Ç—Ä –æ–±–æ–¥–∞
                </li>
                <li>
                  <strong>PCD (Pitch Circle Diameter)</strong> - –¥–∏–∞–º–µ—Ç—Ä
                  –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –≤–æ —Ñ–ª–∞–Ω—Ü–µ –≤—Ç—É–ª–∫–∏
                </li>
                <li>
                  <strong>–ü–∞—Ç—Ç–µ—Ä–Ω –ø–µ—Ä–µ–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è</strong> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                  –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å–ø–∏—Ü
                </li>
                <li>
                  <strong>–§–ª–∞–Ω—Ü–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ</strong> - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                  –≤—Ç—É–ª–∫–∏ –¥–æ —Ñ–ª–∞–Ω—Ü–∞
                </li>
              </ul>
            </div>

            <div className={styles.tutorialSection}>
              <h4>üîß –í—ã–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞:</h4>
              <ul>
                <li>
                  <strong>1x:</strong> –¢—Ä–µ–∫–æ–≤—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
                  —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
                </li>
                <li>
                  <strong>2x:</strong> –®–æ—Å—Å–µ–π–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã, —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å
                </li>
                <li>
                  <strong>3x:</strong> –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä
                </li>
                <li>
                  <strong>4x:</strong> –ì–æ—Ä–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã, –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å
                </li>
                <li>
                  <strong>5x:</strong> –¢—è–∂–µ–ª—ã–µ —É—Å–ª–æ–≤–∏—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å
                </li>
              </ul>
            </div>

            <div className={styles.tutorialSection}>
              <h4>‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:</h4>
              <ul>
                <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º</li>
                <li>–ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∏—Ü</li>
                <li>
                  –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–±–æ–¥–∞ –∏ –≤—Ç—É–ª–∫–∏
                </li>
                <li>–†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
              </ul>
            </div>
          </div>
        </div>
      )}

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          calculateSpokePattern();
        }}
      >
        <div className="inputGroup">
          <label htmlFor="wheelType">–¢–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞</label>
          <select
            id="wheelType"
            value={wheelType}
            onChange={(e) => selectWheelType(e.target.value)}
          >
            {Object.entries(wheelTypes).map(([key, value]) => (
              <option key={key} value={key}>
                {value.name}
              </option>
            ))}
          </select>
          <div className="help">
            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          </div>
        </div>

        <div className="inputGroup">
          <label htmlFor="spokeCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü</label>
          <input
            id="spokeCount"
            type="number"
            value={spokeCount}
            onChange={(e) => setSpokeCount(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 32"
            min="12"
            max="48"
            step="2"
          />
          <div className="help">
            –û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 28, 32, 36 –∏–ª–∏ 48 —Å–ø–∏—Ü. –ë–æ–ª—å—à–µ —Å–ø–∏—Ü = –±–æ–ª—å—à–µ
            –ø—Ä–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –±–æ–ª—å—à–µ –≤–µ—Å
          </div>
        </div>

        <div className="inputGroup">
          <label htmlFor="crossPattern">–ü–∞—Ç—Ç–µ—Ä–Ω –ø–µ—Ä–µ–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è</label>
          <select
            id="crossPattern"
            value={crossPattern}
            onChange={(e) => setCrossPattern(e.target.value)}
          >
            <option value="1">1x (–æ–¥–∏–Ω –∫—Ä–µ—Å—Ç)</option>
            <option value="2">2x (–¥–≤–∞ –∫—Ä–µ—Å—Ç–∞)</option>
            <option value="3">3x (—Ç—Ä–∏ –∫—Ä–µ—Å—Ç–∞)</option>
            <option value="4">4x (—á–µ—Ç—ã—Ä–µ –∫—Ä–µ—Å—Ç–∞)</option>
            <option value="5">5x (–ø—è—Ç—å –∫—Ä–µ—Å—Ç–æ–≤)</option>
          </select>
          <div className="help">{getCrossDescription(crossPattern)}</div>
        </div>

        <div className="inputGroup">
          <label>
            <input
              className={styles.checkbox}
              type="checkbox"
              checked={useAdvanced}
              onChange={(e) => setUseAdvanced(e.target.checked)}
            />
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </label>
          <div className={styles.help}>
            –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏–Ω—ã —Å–ø–∏—Ü (—Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±–æ–¥–∞ –∏ –≤—Ç—É–ª–∫–∏)
          </div>
        </div>

        {useAdvanced && (
          <div className={styles.advancedSettings}>
            <h4>üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>

            <div className={styles.specsGrid}>
              <div className=" inputGroup">
                <label htmlFor="erd">ERD –æ–±–æ–¥–∞ (–º–º)</label>
                <input
                  id="erd"
                  type="number"
                  value={wheelSpecs.erd}
                  onChange={(e) =>
                    updateWheelSpecs('erd', parseInt(e.target.value))
                  }
                  placeholder="622"
                  min="300"
                  max="800"
                />
                <div className="help">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä –æ–±–æ–¥–∞</div>
              </div>

              <div className="inputGroup">
                <label htmlFor="pcd">PCD –≤—Ç—É–ª–∫–∏ (–º–º)</label>
                <input
                  id="pcd"
                  type="number"
                  value={wheelSpecs.pcd}
                  onChange={(e) =>
                    updateWheelSpecs('pcd', parseInt(e.target.value))
                  }
                  placeholder="44"
                  min="20"
                  max="80"
                />
                <div className="help">
                  –î–∏–∞–º–µ—Ç—Ä –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –≤–æ —Ñ–ª–∞–Ω—Ü–µ
                </div>
              </div>

              <div className="inputGroup">
                <label htmlFor="flangeOffset">–§–ª–∞–Ω—Ü–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ (–º–º)</label>
                <input
                  id="flangeOffset"
                  type="number"
                  value={wheelSpecs.flangeOffset}
                  onChange={(e) =>
                    updateWheelSpecs('flangeOffset', parseInt(e.target.value))
                  }
                  placeholder="35"
                  min="20"
                  max="60"
                />
                <div className="help">
                  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≤—Ç—É–ª–∫–∏ –¥–æ —Ñ–ª–∞–Ω—Ü–∞
                </div>
              </div>

              <div className="inputGroup">
                <label htmlFor="hubWidth">–®–∏—Ä–∏–Ω–∞ –≤—Ç—É–ª–∫–∏ (–º–º)</label>
                <input
                  id="hubWidth"
                  type="number"
                  value={wheelSpecs.hubWidth}
                  onChange={(e) =>
                    updateWheelSpecs('hubWidth', parseInt(e.target.value))
                  }
                  placeholder="100"
                  min="70"
                  max="150"
                />
                <div className="help">–û–±—â–∞—è —à–∏—Ä–∏–Ω–∞ –≤—Ç—É–ª–∫–∏</div>
              </div>
            </div>
          </div>
        )}

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω
          </button>
        </div>
      </form>

      {result && (
        <div className="result">
          <h3>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>

          <div className={styles.resultSummary}>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Ü:</span>
              <span className={styles.value}>{spokeCount}</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ü–∞—Ç—Ç–µ—Ä–Ω:</span>
              <span className={styles.value}>{result.crossPattern}x</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–¢–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:</span>
              <span className={styles.value}>
                {getWheelTypeDescription(wheelType)}
              </span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
              <span className={styles.value}>{result.difficulty}</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ù–∞—Ç—è–∂–µ–Ω–∏–µ:</span>
              <span
                className={`${styles.value} ${styles.tension}-${result.tension
                  .toLowerCase()
                  .replace(' ', '-')}`}
              >
                {result.tension}
              </span>
            </div>
          </div>

          <div className={styles.spokePattern}>
            <h4>üìê –ü–∞—Ç—Ç–µ—Ä–Ω —Å–ø–∏—Ü–µ–≤–∞–Ω–∏—è</h4>

            <div className={styles.patternVisualization}>
              <div className={`${styles.wheelSide} ${styles.left}`}>
                <h5>üîµ –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≤–µ–¥—É—â–∞—è)</h5>
                <div className={styles.spokeNumbers}>
                  {result.leftSide.map((spoke, index) => (
                    <span
                      key={index}
                      className={`${styles.spokeNumber} ${styles.left}`}
                    >
                      {spoke}
                    </span>
                  ))}
                </div>
              </div>

              <div className={`${styles.wheelSide} ${styles.right}`}>
                <h5>üü° –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≤–µ–¥–æ–º–∞—è)</h5>
                <div className={styles.spokeNumbers}>
                  {result.rightSide.map((spoke, index) => (
                    <span
                      key={index}
                      className={`${styles.spokeNumber} ${styles.right}`}
                    >
                      {spoke}
                    </span>
                  ))}
                </div>
              </div>
            </div>

            <div className={styles.patternInfo}>
              <p>
                <strong>–ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</strong>
              </p>
              <ol>
                <li>
                  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ —Å–ø–∏—Ü—ã –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (1-{result.leftSide.length}
                  )
                </li>
                <li>
                  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ —Å–ø–∏—Ü—ã –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (1-
                  {result.rightSide.length})
                </li>
                <li>–ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Ç—è–≥–∏–≤–∞—Ç—å —Å–ø–∏—Ü—ã –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏</li>
                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∏–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞</li>
                <li>–î–æ–≤–µ–¥–∏—Ç–µ –Ω–∞—Ç—è–∂–µ–Ω–∏–µ –¥–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ</li>
              </ol>
            </div>
          </div>

          <div className={styles.spokeSpecs}>
            <h4>üìè –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∏—Ü</h4>

            <div className={styles.specsGrid}>
              <div className={styles.specItem}>
                <span className={styles.label}>–î–ª–∏–Ω–∞ —Å–ø–∏—Ü:</span>
                <span className={styles.value}>{result.spokeLength} –º–º</span>
              </div>

              {useAdvanced && (
                <>
                  <div className={styles.specItem}>
                    <span className={styles.label}>ERD –æ–±–æ–¥–∞:</span>
                    <span className={styles.value}>{wheelSpecs.erd} –º–º</span>
                  </div>
                  <div className={styles.specItem}>
                    <span className={styles.label}>PCD –≤—Ç—É–ª–∫–∏:</span>
                    <span className={styles.value}>{wheelSpecs.pcd} –º–º</span>
                  </div>
                  <div className={styles.specItem}>
                    <span className={styles.label}>–§–ª–∞–Ω—Ü–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ:</span>
                    <span className={styles.value}>
                      {wheelSpecs.flangeOffset} –º–º
                    </span>
                  </div>
                  <div className={styles.specItem}>
                    <span className={styles.label}>–®–∏—Ä–∏–Ω–∞ –≤—Ç—É–ª–∫–∏:</span>
                    <span className={styles.value}>
                      {wheelSpecs.hubWidth} –º–º
                    </span>
                  </div>
                </>
              )}
            </div>

            {!useAdvanced && (
              <div className={styles.warning}>
                ‚ö†Ô∏è <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –î–ª–∏–Ω–∞ —Å–ø–∏—Ü —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞
                –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ
                –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –æ–±–æ–¥–∞ –∏ –≤—Ç—É–ª–∫–∏.
              </div>
            )}
          </div>

          <div className={styles.recommendations}>
            <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>

            <div className={styles.recommendationsList}>
              <div className={styles.recommendation}>
                <strong>üéØ –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:</strong>
                <ul>
                  <li>–ù–∞—á–Ω–∏—Ç–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞ 3x –¥–ª—è {spokeCount} —Å–ø–∏—Ü</li>
                  <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã —Å–ø–∏—Ü</li>
                  <li>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø—ã—Ç–Ω–æ–º—É –º–µ—Ö–∞–Ω–∏–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–±–æ—Ä–∫–∏</li>
                </ul>
              </div>

              <div className={styles.recommendation}>
                <strong>üîß –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤:</strong>
                <ul>
                  <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞</li>
                  <li>–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–∏–ø –æ–±–æ–¥–∞ –∏ –≤—Ç—É–ª–∫–∏</li>
                  <li>–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞—Ç—è–∂–µ–Ω–∏–µ —Ç–µ–Ω–∑–æ–º–µ—Ç—Ä–æ–º</li>
                  <li>–î–µ–ª–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É</li>
                </ul>
              </div>
            </div>
          </div>

          <div className={styles.tools}>
            <h4>üõ†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h4>
            <div className={styles.toolsList}>
              <span className={styles.tool}>–°–ø–∏—Ü–µ–≤—ã–π –∫–ª—é—á</span>
              <span className={styles.tool}>–¢–µ–Ω–∑–æ–º–µ—Ç—Ä</span>
              <span className={styles.tool}>–°—Ç–∞–Ω–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∫–∏</span>
              <span className={styles.tool}>–ú–∞—Ä–∫–µ—Ä</span>
              <span className={styles.tool}>–õ–∏–Ω–µ–π–∫–∞</span>
            </div>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default SpokeCalculator;

import React, { useState, useEffect } from 'react';
import styles from './CookingCalculator.module.scss';

interface Product {
  id: string;
  name: string;
  category: string;
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  fiber: number;
  sugar: number;
  pricePerKg: number;
  cookingLoss: number; // –ü–æ—Ç–µ—Ä—è –≤–µ—Å–∞ –ø—Ä–∏ –≥–æ—Ç–æ–≤–∫–µ –≤ %
}

interface Recipe {
  id: string;
  name: string;
  ingredients: RecipeIngredient[];
  instructions: string[];
  cookingTime: number;
  servings: number;
  difficulty: 'easy' | 'medium' | 'hard';
  cuisine: string;
  tags: string[];
}

interface RecipeIngredient {
  productId: string;
  amount: number;
  unit: string;
  isOptional: boolean;
}

interface DailyPlan {
  meals: {
    breakfast: Product[];
    lunch: Product[];
    dinner: Product[];
    snacks: Product[];
  };
  totals: {
    calories: number;
    protein: number;
    fat: number;
    carbs: number;
    cost: number;
  };
}

const CookingCalculator: React.FC = () => {
  const [calculatorType, setCalculatorType] = useState('nutrition');
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –µ–¥–∏–Ω–∏—Ü
  const [converterAmount, setConverterAmount] = useState('');
  const [converterFromUnit, setConverterFromUnit] = useState('–≥');
  const [converterToUnit, setConverterToUnit] = useState('–∫–≥');
  const [conversionResult, setConversionResult] = useState<number | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≥–æ—Ç–æ–≤–∫–∏
  const [cookingProduct, setCookingProduct] = useState('');
  const [cookingWeight, setCookingWeight] = useState('');
  const [cookingMethod, setCookingMethod] = useState('boiling');
  const [cookingResults, setCookingResults] = useState<any>(null);

  // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const productsDatabase: Product[] = [
    // –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
    {
      id: 'chicken_breast',
      name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞',
      category: 'meat',
      calories: 165,
      protein: 31,
      fat: 3.6,
      carbs: 0,
      fiber: 0,
      sugar: 0,
      pricePerKg: 350,
      cookingLoss: 25,
    },
    {
      id: 'beef_mince',
      name: '–ì–æ–≤—è–∂–∏–π —Ñ–∞—Ä—à',
      category: 'meat',
      calories: 242,
      protein: 26,
      fat: 15,
      carbs: 0,
      fiber: 0,
      sugar: 0,
      pricePerKg: 450,
      cookingLoss: 30,
    },
    {
      id: 'pork_loin',
      name: '–°–≤–∏–Ω–∞—è –≤—ã—Ä–µ–∑–∫–∞',
      category: 'meat',
      calories: 143,
      protein: 21,
      fat: 6,
      carbs: 0,
      fiber: 0,
      sugar: 0,
      pricePerKg: 380,
      cookingLoss: 25,
    },
    {
      id: 'salmon',
      name: '–õ–æ—Å–æ—Å—å',
      category: 'fish',
      calories: 208,
      protein: 25,
      fat: 12,
      carbs: 0,
      fiber: 0,
      sugar: 0,
      pricePerKg: 1200,
      cookingLoss: 20,
    },
    {
      id: 'cod',
      name: '–¢—Ä–µ—Å–∫–∞',
      category: 'fish',
      calories: 82,
      protein: 18,
      fat: 0.7,
      carbs: 0,
      fiber: 0,
      sugar: 0,
      pricePerKg: 450,
      cookingLoss: 20,
    },

    // –ö—Ä—É–ø—ã –∏ –∑–ª–∞–∫–∏
    {
      id: 'rice_white',
      name: '–†–∏—Å –±–µ–ª—ã–π',
      category: 'grains',
      calories: 130,
      protein: 2.7,
      fat: 0.3,
      carbs: 28,
      fiber: 0.4,
      sugar: 0.1,
      pricePerKg: 80,
      cookingLoss: -200,
    },
    {
      id: 'buckwheat',
      name: '–ì—Ä–µ—á–∫–∞',
      category: 'grains',
      calories: 92,
      protein: 3.4,
      fat: 0.6,
      carbs: 19,
      fiber: 2.7,
      sugar: 0.9,
      pricePerKg: 120,
      cookingLoss: -200,
    },
    {
      id: 'quinoa',
      name: '–ö–∏–Ω–æ–∞',
      category: 'grains',
      calories: 120,
      protein: 4.4,
      fat: 1.9,
      carbs: 22,
      fiber: 2.8,
      sugar: 0.9,
      pricePerKg: 450,
      cookingLoss: -200,
    },
    {
      id: 'oats',
      name: '–û–≤—Å—è–Ω–∫–∞',
      category: 'grains',
      calories: 68,
      protein: 2.4,
      fat: 1.4,
      carbs: 12,
      fiber: 1.7,
      sugar: 0.3,
      pricePerKg: 90,
      cookingLoss: -150,
    },

    // –û–≤–æ—â–∏
    {
      id: 'broccoli',
      name: '–ë—Ä–æ–∫–∫–æ–ª–∏',
      category: 'vegetables',
      calories: 34,
      protein: 2.8,
      fat: 0.4,
      carbs: 7,
      fiber: 2.6,
      sugar: 1.5,
      pricePerKg: 180,
      cookingLoss: 10,
    },
    {
      id: 'carrot',
      name: '–ú–æ—Ä–∫–æ–≤—å',
      category: 'vegetables',
      calories: 41,
      protein: 0.9,
      fat: 0.2,
      carbs: 10,
      fiber: 2.8,
      sugar: 4.7,
      pricePerKg: 60,
      cookingLoss: 5,
    },
    {
      id: 'tomato',
      name: '–ü–æ–º–∏–¥–æ—Ä',
      category: 'vegetables',
      calories: 18,
      protein: 0.9,
      fat: 0.2,
      carbs: 3.9,
      fiber: 1.2,
      sugar: 2.6,
      pricePerKg: 120,
      cookingLoss: 15,
    },
    {
      id: 'onion',
      name: '–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π',
      category: 'vegetables',
      calories: 40,
      protein: 1.1,
      fat: 0.1,
      carbs: 9.3,
      fiber: 1.7,
      sugar: 4.7,
      pricePerKg: 40,
      cookingLoss: 20,
    },
    {
      id: 'potato',
      name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å',
      category: 'vegetables',
      calories: 77,
      protein: 2,
      fat: 0.1,
      carbs: 17,
      fiber: 2.2,
      sugar: 0.8,
      pricePerKg: 50,
      cookingLoss: 15,
    },

    // –§—Ä—É–∫—Ç—ã
    {
      id: 'apple',
      name: '–Ø–±–ª–æ–∫–æ',
      category: 'fruits',
      calories: 52,
      protein: 0.3,
      fat: 0.2,
      carbs: 14,
      fiber: 2.4,
      sugar: 10.4,
      pricePerKg: 120,
      cookingLoss: 0,
    },
    {
      id: 'banana',
      name: '–ë–∞–Ω–∞–Ω',
      category: 'fruits',
      calories: 89,
      protein: 1.1,
      fat: 0.3,
      carbs: 23,
      fiber: 2.6,
      sugar: 12,
      pricePerKg: 140,
      cookingLoss: 0,
    },
    {
      id: 'orange',
      name: '–ê–ø–µ–ª—å—Å–∏–Ω',
      category: 'fruits',
      calories: 47,
      protein: 0.9,
      fat: 0.1,
      carbs: 12,
      fiber: 2.4,
      sugar: 9.4,
      pricePerKg: 160,
      cookingLoss: 0,
    },

    // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    {
      id: 'milk_3.2',
      name: '–ú–æ–ª–æ–∫–æ 3.2%',
      category: 'dairy',
      calories: 64,
      protein: 3.3,
      fat: 3.2,
      carbs: 4.8,
      fiber: 0,
      sugar: 4.8,
      pricePerKg: 80,
      cookingLoss: 0,
    },
    {
      id: 'yogurt_natural',
      name: '–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π',
      category: 'dairy',
      calories: 59,
      protein: 10,
      fat: 0.4,
      carbs: 3.6,
      fiber: 0,
      sugar: 3.2,
      pricePerKg: 200,
      cookingLoss: 0,
    },
    {
      id: 'cheese_cottage',
      name: '–¢–≤–æ—Ä–æ–≥ 5%',
      category: 'dairy',
      calories: 121,
      protein: 17,
      fat: 5,
      carbs: 1.8,
      fiber: 0,
      sugar: 1.8,
      pricePerKg: 300,
      cookingLoss: 0,
    },

    // –Ø–π—Ü–∞ –∏ –º–∞—Å–ª–∞
    {
      id: 'egg_chicken',
      name: '–Ø–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ',
      category: 'eggs',
      calories: 155,
      protein: 13,
      fat: 11,
      carbs: 1.1,
      fiber: 0,
      sugar: 1.1,
      pricePerKg: 200,
      cookingLoss: 0,
    },
    {
      id: 'olive_oil',
      name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ',
      category: 'oils',
      calories: 884,
      protein: 0,
      fat: 100,
      carbs: 0,
      fiber: 0,
      sugar: 0,
      pricePerKg: 800,
      cookingLoss: 0,
    },
    {
      id: 'butter',
      name: '–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ',
      category: 'oils',
      calories: 717,
      protein: 0.9,
      fat: 81,
      carbs: 0.1,
      fiber: 0,
      sugar: 0.1,
      pricePerKg: 600,
      cookingLoss: 0,
    },

    // –û—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞
    {
      id: 'almonds',
      name: '–ú–∏–Ω–¥–∞–ª—å',
      category: 'nuts',
      calories: 579,
      protein: 21,
      fat: 50,
      carbs: 22,
      fiber: 12.5,
      sugar: 4.8,
      pricePerKg: 1200,
      cookingLoss: 0,
    },
    {
      id: 'walnuts',
      name: '–ì—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö',
      category: 'nuts',
      calories: 654,
      protein: 15,
      fat: 65,
      carbs: 14,
      fiber: 6.7,
      sugar: 2.6,
      pricePerKg: 800,
      cookingLoss: 0,
    },
    {
      id: 'sunflower_seeds',
      name: '–°–µ–º–µ—á–∫–∏ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫–∞',
      category: 'nuts',
      calories: 584,
      protein: 21,
      fat: 51,
      carbs: 20,
      fiber: 8.6,
      sugar: 2.6,
      pricePerKg: 200,
      cookingLoss: 0,
    },
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
  const [selectedProducts, setSelectedProducts] = useState<Product[]>([]);
  const [dailyPlan, setDailyPlan] = useState<DailyPlan>({
    meals: { breakfast: [], lunch: [], dinner: [], snacks: [] },
    totals: { calories: 0, protein: 0, fat: 0, carbs: 0, cost: 0 },
  });
  const [recipeIngredients, setRecipeIngredients] = useState<
    RecipeIngredient[]
  >([]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const filteredProducts = productsDatabase.filter((product) => {
    const matchesSearch = product.name
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    const matchesCategory =
      selectedCategory === 'all' || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const categories = [
    { id: 'all', name: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', icon: 'üçΩÔ∏è' },
    { id: 'meat', name: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞', icon: 'ü•©' },
    { id: 'fish', name: '–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', icon: 'üêü' },
    { id: 'grains', name: '–ö—Ä—É–ø—ã –∏ –∑–ª–∞–∫–∏', icon: 'üåæ' },
    { id: 'vegetables', name: '–û–≤–æ—â–∏', icon: 'ü•¨' },
    { id: 'fruits', name: '–§—Ä—É–∫—Ç—ã', icon: 'üçé' },
    { id: 'dairy', name: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', icon: 'ü•õ' },
    { id: 'eggs', name: '–Ø–π—Ü–∞', icon: 'ü•ö' },
    { id: 'oils', name: '–ú–∞—Å–ª–∞', icon: 'ü´ó' },
    { id: 'nuts', name: '–û—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞', icon: 'ü•ú' },
  ];

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ø–ª–∞–Ω
  const addProductToMeal = (
    product: Product,
    mealType: keyof typeof dailyPlan.meals
  ) => {
    setDailyPlan((prev) => {
      const newMeals = { ...prev.meals };
      newMeals[mealType] = [...newMeals[mealType], product];

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      const allProducts = Object.values(newMeals).flat();
      const totals = calculateTotals(allProducts);

      return {
        meals: newMeals,
        totals,
      };
    });
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ø–ª–∞–Ω–∞
  const removeProductFromMeal = (
    productId: string,
    mealType: keyof typeof dailyPlan.meals
  ) => {
    setDailyPlan((prev) => {
      const newMeals = { ...prev.meals };
      newMeals[mealType] = newMeals[mealType].filter((p) => p.id !== productId);

      const allProducts = Object.values(newMeals).flat();
      const totals = calculateTotals(allProducts);

      return {
        meals: newMeals,
        totals,
      };
    });
  };

  // –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
  const calculateTotals = (products: Product[]) => {
    return products.reduce(
      (acc, product) => ({
        calories: acc.calories + product.calories,
        protein: acc.protein + product.protein,
        fat: acc.fat + product.fat,
        carbs: acc.carbs + product.carbs,
        cost: acc.cost + product.pricePerKg / 1000, // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≥—Ä–∞–º–º
      }),
      { calories: 0, protein: 0, fat: 0, carbs: 0, cost: 0 }
    );
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
  const convertUnits = (
    amount: number,
    fromUnit: string,
    toUnit: string
  ): number => {
    const conversions: { [key: string]: { [key: string]: number } } = {
      –≥: {
        –∫–≥: 0.001,
        –º–ª: 1,
        –ª: 0.001,
        —Å—Ç–∞–∫–∞–Ω: 0.004,
        '—Å—Ç.–ª.': 0.067,
        '—á.–ª.': 0.2,
      },
      –∫–≥: { –≥: 1000, –º–ª: 1000, –ª: 1, —Å—Ç–∞–∫–∞–Ω: 4, '—Å—Ç.–ª.': 67, '—á.–ª.': 200 },
      –º–ª: {
        –≥: 1,
        –∫–≥: 0.001,
        –ª: 0.001,
        —Å—Ç–∞–∫–∞–Ω: 0.004,
        '—Å—Ç.–ª.': 0.067,
        '—á.–ª.': 0.2,
      },
      –ª: { –≥: 1000, –∫–≥: 1, –º–ª: 1000, —Å—Ç–∞–∫–∞–Ω: 4, '—Å—Ç.–ª.': 67, '—á.–ª.': 200 },
      —Å—Ç–∞–∫–∞–Ω: { –≥: 250, –∫–≥: 0.25, –º–ª: 250, –ª: 0.25, '—Å—Ç.–ª.': 16.7, '—á.–ª.': 50 },
      '—Å—Ç.–ª.': { –≥: 15, –∫–≥: 0.015, –º–ª: 15, –ª: 0.015, —Å—Ç–∞–∫–∞–Ω: 0.06, '—á.–ª.': 3 },
      '—á.–ª.': { –≥: 5, –∫–≥: 0.005, –º–ª: 5, –ª: 0.005, —Å—Ç–∞–∫–∞–Ω: 0.02, '—Å—Ç.–ª.': 0.33 },
    };

    if (conversions[fromUnit] && conversions[fromUnit][toUnit]) {
      return amount * conversions[fromUnit][toUnit];
    }
    return amount;
  };

  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
  const calculateCookingTime = (
    method: string,
    weight: number,
    product: Product
  ): number => {
    const baseTimes: { [key: string]: number } = {
      boiling: 15, // –≤–∞—Ä–∫–∞
      frying: 8, // –∂–∞—Ä–∫–∞
      baking: 25, // –∑–∞–ø–µ–∫–∞–Ω–∏–µ
      steaming: 12, // –ø–∞—Ä
      grilling: 10, // –≥—Ä–∏–ª—å
    };

    const baseTime = baseTimes[method] || 15;
    const weightFactor = weight / 100; // –Ω–∞ 100–≥
    const categoryFactor = product.category === 'meat' ? 1.5 : 1;

    return Math.round(baseTime * weightFactor * categoryFactor);
  };

  // –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
  const getCookingTemperature = (method: string, product: Product): string => {
    const temperatures: { [key: string]: { [key: string]: string } } = {
      boiling: {
        meat: '100¬∞C',
        fish: '85¬∞C',
        vegetables: '100¬∞C',
        grains: '100¬∞C',
      },
      frying: { meat: '180-200¬∞C', fish: '160-180¬∞C', vegetables: '160-180¬∞C' },
      baking: {
        meat: '180-200¬∞C',
        fish: '180¬∞C',
        vegetables: '180¬∞C',
        grains: '180¬∞C',
      },
      steaming: { meat: '100¬∞C', fish: '85¬∞C', vegetables: '100¬∞C' },
      grilling: {
        meat: '200-250¬∞C',
        fish: '180-200¬∞C',
        vegetables: '180-200¬∞C',
      },
    };

    return temperatures[method]?.[product.category] || '180¬∞C';
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
  const generateShoppingList = () => {
    const allProducts = Object.values(dailyPlan.meals).flat();
    const shoppingList = allProducts.reduce(
      (acc: { [key: string]: number }, product) => {
        acc[product.name] = (acc[product.name] || 0) + 100; // 100–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é
        return acc;
      },
      {}
    );

    return Object.entries(shoppingList).map(
      ([name, amount]) => `${name}: ${amount}–≥`
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü
  const handleConversion = () => {
    if (!converterAmount || isNaN(parseFloat(converterAmount))) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
      return;
    }

    const amount = parseFloat(converterAmount);
    const result = convertUnits(amount, converterFromUnit, converterToUnit);
    setConversionResult(result);
    setError('');
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–∫–∏
  const handleCookingCalculation = () => {
    if (!cookingProduct || !cookingWeight || isNaN(parseFloat(cookingWeight))) {
      setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return;
    }

    const product = productsDatabase.find((p) => p.id === cookingProduct);
    if (!product) {
      setError('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const weight = parseFloat(cookingWeight);
    const cookingTime = calculateCookingTime(cookingMethod, weight, product);
    const temperature = getCookingTemperature(cookingMethod, product);

    // –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ—Ä–∏ –≤–µ—Å–∞ –ø—Ä–∏ –≥–æ—Ç–æ–≤–∫–µ
    let finalWeight = weight;
    let weightLoss = 0;

    if (product.cookingLoss > 0) {
      // –ü—Ä–æ–¥—É–∫—Ç —Ç–µ—Ä—è–µ—Ç –≤–µ—Å (–º—è—Å–æ, –æ–≤–æ—â–∏)
      weightLoss = (weight * product.cookingLoss) / 100;
      finalWeight = weight - weightLoss;
    } else if (product.cookingLoss < 0) {
      // –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å (–∫—Ä—É–ø—ã, –º–∞–∫–∞—Ä–æ–Ω—ã)
      weightLoss = Math.abs(product.cookingLoss);
      finalWeight = weight + (weight * weightLoss) / 100;
    }

    setCookingResults({
      product: product.name,
      weight: weight,
      method: cookingMethod,
      cookingTime: cookingTime,
      temperature: temperature,
      weightLoss: weightLoss,
      finalWeight: finalWeight,
      originalLoss: product.cookingLoss,
    });

    setError('');
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  const clearForm = () => {
    setCalculatorType('nutrition');
    setResult(null);
    setError('');
    setSelectedProducts([]);
    setDailyPlan({
      meals: { breakfast: [], lunch: [], dinner: [], snacks: [] },
      totals: { calories: 0, protein: 0, fat: 0, carbs: 0, cost: 0 },
    });
    setRecipeIngredients([]);
    setCookingMethod('boiling');
    setConverterAmount('');
    setConverterFromUnit('–≥');
    setConverterToUnit('–∫–≥');
    setConversionResult(null);
    setCookingProduct('');
    setCookingWeight('');
    setCookingResults(null);
  };

  return (
    <div className={`${styles.calculator} cookingCalculator`}>
      <div className="calculatorHeader">
        <h2>üë®‚Äçüç≥ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h2>
        <p>
          –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ
          –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏.
        </p>
      </div>

      <div className={styles.calculatorTabs}>
        <button
          className={`${styles.tab} ${
            calculatorType === 'nutrition' ? styles.active : ''
          }`}
          onClick={() => setCalculatorType('nutrition')}
        >
          ü•ó –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è
        </button>
        <button
          className={`${styles.tab} ${
            calculatorType === 'converter' ? styles.active : ''
          }`}
          onClick={() => setCalculatorType('converter')}
        >
          üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü
        </button>
        <button
          className={`${styles.tab} ${
            calculatorType === 'cooking' ? styles.active : ''
          }`}
          onClick={() => setCalculatorType('cooking')}
        >
          üç≥ –†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤–∫–∏
        </button>
        <button
          className={`${styles.tab} ${
            calculatorType === 'shopping' ? styles.active : ''
          }`}
          onClick={() => setCalculatorType('shopping')}
        >
          üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        </button>
      </div>

      {calculatorType === 'nutrition' && (
        <div className={styles.nutritionCalculator}>
          <div className={styles.productSearch}>
            <div className={styles.searchControls}>
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className={styles.searchInput}
              />
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className={styles.categorySelect}
              >
                {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.icon} {category.name}
                  </option>
                ))}
              </select>
            </div>

            <div className={styles.productsList}>
              {filteredProducts.map((product) => (
                <div key={product.id} className={styles.productCard}>
                  <div className={styles.productInfo}>
                    <h4>{product.name}</h4>
                    <div className={styles.productStats}>
                      <span>{product.calories} –∫–∫–∞–ª/100–≥</span>
                      <span>–ë: {product.protein}–≥</span>
                      <span>–ñ: {product.fat}–≥</span>
                      <span>–£: {product.carbs}–≥</span>
                    </div>
                    <div className={styles.productPrice}>
                      {product.pricePerKg}‚ÇΩ/–∫–≥
                    </div>
                  </div>
                  <div className={styles.mealButtons}>
                    <button
                      onClick={() => addProductToMeal(product, 'breakfast')}
                    >
                      üç≥ –ó–∞–≤—Ç—Ä–∞–∫
                    </button>
                    <button onClick={() => addProductToMeal(product, 'lunch')}>
                      üçΩÔ∏è –û–±–µ–¥
                    </button>
                    <button onClick={() => addProductToMeal(product, 'dinner')}>
                      üç¥ –£–∂–∏–Ω
                    </button>
                    <button onClick={() => addProductToMeal(product, 'snacks')}>
                      üçé –ü–µ—Ä–µ–∫—É—Å
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className={styles.dailyPlan}>
            <h3>üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å</h3>

            <div className={styles.mealsGrid}>
              <div className={styles.mealSection}>
                <h4>üç≥ –ó–∞–≤—Ç—Ä–∞–∫</h4>
                {dailyPlan.meals.breakfast.map((product, index) => (
                  <div key={index} className={styles.mealProduct}>
                    <span>{product.name}</span>
                    <button
                      onClick={() =>
                        removeProductFromMeal(product.id, 'breakfast')
                      }
                    >
                      ‚úï
                    </button>
                  </div>
                ))}
              </div>

              <div className={styles.mealSection}>
                <h4>üçΩÔ∏è –û–±–µ–¥</h4>
                {dailyPlan.meals.lunch.map((product, index) => (
                  <div key={index} className={styles.mealProduct}>
                    <span>{product.name}</span>
                    <button
                      onClick={() => removeProductFromMeal(product.id, 'lunch')}
                    >
                      ‚úï
                    </button>
                  </div>
                ))}
              </div>

              <div className={styles.mealSection}>
                <h4>üç¥ –£–∂–∏–Ω</h4>
                {dailyPlan.meals.dinner.map((product, index) => (
                  <div key={index} className={styles.mealProduct}>
                    <span>{product.name}</span>
                    <button
                      onClick={() =>
                        removeProductFromMeal(product.id, 'dinner')
                      }
                    >
                      ‚úï
                    </button>
                  </div>
                ))}
              </div>

              <div className={styles.mealSection}>
                <h4>üçé –ü–µ—Ä–µ–∫—É—Å—ã</h4>
                {dailyPlan.meals.snacks.map((product, index) => (
                  <div key={index} className={styles.mealProduct}>
                    <span>{product.name}</span>
                    <button
                      onClick={() =>
                        removeProductFromMeal(product.id, 'snacks')
                      }
                    >
                      ‚úï
                    </button>
                  </div>
                ))}
              </div>
            </div>

            <div className={styles.dailyTotals}>
              <h4>üìä –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</h4>
              <div className={styles.totalsGrid}>
                <div className={styles.totalItem}>
                  <span className={styles.label}>–ö–∞–ª–æ—Ä–∏–∏:</span>
                  <span className={styles.value}>
                    {dailyPlan.totals.calories.toFixed(0)} –∫–∫–∞–ª
                  </span>
                </div>
                <div className={styles.totalItem}>
                  <span className={styles.label}>–ë–µ–ª–∫–∏:</span>
                  <span className={styles.value}>
                    {dailyPlan.totals.protein.toFixed(1)} –≥
                  </span>
                </div>
                <div className={styles.totalItem}>
                  <span className={styles.label}>–ñ–∏—Ä—ã:</span>
                  <span className={styles.value}>
                    {dailyPlan.totals.fat.toFixed(1)} –≥
                  </span>
                </div>
                <div className={styles.totalItem}>
                  <span className={styles.label}>–£–≥–ª–µ–≤–æ–¥—ã:</span>
                  <span className={styles.value}>
                    {dailyPlan.totals.carbs.toFixed(1)} –≥
                  </span>
                </div>
                <div className={styles.totalItem}>
                  <span className={styles.label}>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                  <span className={styles.value}>
                    {(dailyPlan.totals.cost * 100).toFixed(2)} ‚ÇΩ
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {calculatorType === 'converter' && (
        <div className={styles.converterCalculator}>
          <h3>üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è</h3>
          <p>
            –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –∫—É–ª–∏–Ω–∞—Ä–∏–∏
          </p>

          <div className={styles.converterForm}>
            <div className={styles.inputRow}>
              <div className={styles.inputGroup}>
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                <input
                  type="number"
                  placeholder="100"
                  min="0"
                  step="0.1"
                  value={converterAmount}
                  onChange={(e) => setConverterAmount(e.target.value)}
                />
              </div>
              <div className={styles.inputGroup}>
                <label>–ò–∑</label>
                <select
                  value={converterFromUnit}
                  onChange={(e) => setConverterFromUnit(e.target.value)}
                >
                  {['–≥', '–∫–≥', '–º–ª', '–ª', '—Å—Ç–∞–∫–∞–Ω', '—Å—Ç.–ª.', '—á.–ª.'].map(
                    (unit) => (
                      <option key={unit} value={unit}>
                        {unit}
                      </option>
                    )
                  )}
                </select>
              </div>
              <div className={styles.inputGroup}>
                <label>–í</label>
                <select
                  value={converterToUnit}
                  onChange={(e) => setConverterToUnit(e.target.value)}
                >
                  {['–≥', '–∫–≥', '–º–ª', '–ª', '—Å—Ç–∞–∫–∞–Ω', '—Å—Ç.–ª.', '—á.–ª.'].map(
                    (unit) => (
                      <option key={unit} value={unit}>
                        {unit}
                      </option>
                    )
                  )}
                </select>
              </div>
            </div>

            <div className={styles.inputGroup}>
              <button
                type="button"
                className="calculateBtn"
                onClick={handleConversion}
              >
                –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>

            {error && <div className="error">{error}</div>}

            {conversionResult !== null && (
              <div className={styles.conversionResult}>
                <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</h4>
                <div className={styles.resultValue}>
                  <span className={styles.amount}>
                    {conversionResult.toFixed(3)}
                  </span>
                  <span className={styles.unit}>{converterToUnit}</span>
                </div>
              </div>
            )}
          </div>

          <div className={styles.conversionTable}>
            <h4>üìã –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</h4>
            <table>
              <thead>
                <tr>
                  <th>–ï–¥–∏–Ω–∏—Ü–∞</th>
                  <th>–ì—Ä–∞–º–º—ã</th>
                  <th>–ú–∏–ª–∏–ª–∏—Ç—Ä—ã</th>
                  <th>–°—Ç–∞–∫–∞–Ω—ã</th>
                  <th>–°—Ç. –ª–æ–∂–∫–∏</th>
                  <th>–ß. –ª–æ–∂–∫–∏</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>1 —Å—Ç–∞–∫–∞–Ω</td>
                  <td>250 –≥</td>
                  <td>250 –º–ª</td>
                  <td>1</td>
                  <td>16.7</td>
                  <td>50</td>
                </tr>
                <tr>
                  <td>1 —Å—Ç. –ª–æ–∂–∫–∞</td>
                  <td>15 –≥</td>
                  <td>15 –º–ª</td>
                  <td>0.06</td>
                  <td>1</td>
                  <td>3</td>
                </tr>
                <tr>
                  <td>1 —á. –ª–æ–∂–∫–∞</td>
                  <td>5 –≥</td>
                  <td>5 –º–ª</td>
                  <td>0.02</td>
                  <td>0.33</td>
                  <td>1</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      )}

      {calculatorType === 'cooking' && (
        <div className={styles.cookingCalculator}>
          <h3>üç≥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h3>

          <div className={styles.cookingForm}>
            <div className={styles.inputRow}>
              <div className={styles.inputGroup}>
                <label>–ü—Ä–æ–¥—É–∫—Ç</label>
                <select
                  value={cookingProduct}
                  onChange={(e) => setCookingProduct(e.target.value)}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç</option>
                  {productsDatabase.map((product) => (
                    <option key={product.id} value={product.id}>
                      {product.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className={styles.inputGroup}>
                <label>–í–µ—Å (–≥)</label>
                <input
                  type="number"
                  placeholder="200"
                  min="1"
                  step="1"
                  value={cookingWeight}
                  onChange={(e) => setCookingWeight(e.target.value)}
                />
              </div>
              <div className={styles.inputGroup}>
                <label>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</label>
                <select
                  value={cookingMethod}
                  onChange={(e) => setCookingMethod(e.target.value)}
                >
                  <option value="boiling">–í–∞—Ä–∫–∞</option>
                  <option value="frying">–ñ–∞—Ä–∫–∞</option>
                  <option value="baking">–ó–∞–ø–µ–∫–∞–Ω–∏–µ</option>
                  <option value="steaming">–ü–∞—Ä</option>
                  <option value="grilling">–ì—Ä–∏–ª—å</option>
                </select>
              </div>
            </div>

            <div className={styles.inputGroup}>
              <button
                type="button"
                className="calculateBtn"
                onClick={handleCookingCalculation}
              >
                –†–∞—Å—Å—á–∏—Ç–∞—Ç—å
              </button>
            </div>

            {error && <div className="error">{error}</div>}
          </div>

          {cookingResults && (
            <div className={styles.cookingResults}>
              <h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</h4>
              <div className={styles.resultsGrid}>
                <div className={styles.resultItem}>
                  <span className={styles.label}>–ü—Ä–æ–¥—É–∫—Ç:</span>
                  <span className={styles.value}>{cookingResults.product}</span>
                </div>
                <div className={styles.resultItem}>
                  <span className={styles.label}>–ò—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å:</span>
                  <span className={styles.value}>
                    {cookingResults.weight} –≥
                  </span>
                </div>
                <div className={styles.resultItem}>
                  <span className={styles.label}>–°–ø–æ—Å–æ–± –≥–æ—Ç–æ–≤–∫–∏:</span>
                  <span className={styles.value}>
                    {cookingResults.method === 'boiling'
                      ? '–í–∞—Ä–∫–∞'
                      : cookingResults.method === 'frying'
                      ? '–ñ–∞—Ä–∫–∞'
                      : cookingResults.method === 'baking'
                      ? '–ó–∞–ø–µ–∫–∞–Ω–∏–µ'
                      : cookingResults.method === 'steaming'
                      ? '–ü–∞—Ä'
                      : '–ì—Ä–∏–ª—å'}
                  </span>
                </div>
                <div className={styles.resultItem}>
                  <span className={styles.label}>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</span>
                  <span className={styles.value}>
                    {cookingResults.cookingTime} –º–∏–Ω—É—Ç
                  </span>
                </div>
                <div className={styles.resultItem}>
                  <span className={styles.label}>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</span>
                  <span className={styles.value}>
                    {cookingResults.temperature}
                  </span>
                </div>
                <div className={styles.resultItem}>
                  <span className={styles.label}>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞:</span>
                  <span className={styles.value}>
                    {cookingResults.originalLoss > 0
                      ? `-${cookingResults.weightLoss.toFixed(1)} –≥ (–ø–æ—Ç–µ—Ä—è)`
                      : cookingResults.originalLoss < 0
                      ? `+${cookingResults.weightLoss.toFixed(1)} –≥ (–Ω–∞–±–æ—Ä)`
                      : '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}
                  </span>
                </div>
                <div className={styles.resultItem}>
                  <span className={styles.label}>–§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Å:</span>
                  <span className={styles.value}>
                    {cookingResults.finalWeight.toFixed(1)} –≥
                  </span>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {calculatorType === 'shopping' && (
        <div className={styles.shoppingCalculator}>
          <h3>üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫</h3>

          <div className={styles.shoppingList}>
            <h4>üìã –ß—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å:</h4>
            <ul>
              {generateShoppingList().map((item, index) => (
                <li key={index} className={styles.shoppingItem}>
                  <input type="checkbox" id={`item-${index}`} />
                  <label htmlFor={`item-${index}`}>{item}</label>
                </li>
              ))}
            </ul>
          </div>

          <div className={styles.shoppingSummary}>
            <h4>üí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</h4>
            <div className={styles.totalCost}>
              <span className={styles.amount}>
                {(dailyPlan.totals.cost * 100).toFixed(2)}
              </span>
              <span className={styles.unit}>‚ÇΩ</span>
            </div>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
        </button>
      </div>
    </div>
  );
};

export default CookingCalculator;

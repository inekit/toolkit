import React, { useState } from 'react';
import styles from './CookingCalculator.module.scss';

const CookingCalculator: React.FC = () => {
  const [calculatorType, setCalculatorType] = useState('recipe');
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
  const [originalServings, setOriginalServings] = useState('');
  const [newServings, setNewServings] = useState('');
  const [ingredients, setIngredients] = useState([
    { name: '', amount: '', unit: '' },
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∫–∞–ª–æ—Ä–∏–π
  const [foodName, setFoodName] = useState('');
  const [weight, setWeight] = useState('');
  const [caloriesPer100g, setCaloriesPer100g] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ—Ä—Ü–∏–π
  const [totalWeight, setTotalWeight] = useState('');
  const [portionWeight, setPortionWeight] = useState('');
  const [portionCount, setPortionCount] = useState('');

  const calculateRecipe = () => {
    setError('');

    if (
      !originalServings ||
      !newServings ||
      ingredients.some((ing) => !ing.name || !ing.amount)
    ) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    const original = parseFloat(originalServings);
    const newServing = parseFloat(newServings);

    if (
      isNaN(original) ||
      isNaN(newServing) ||
      original <= 0 ||
      newServing <= 0
    ) {
      setError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      return;
    }

    const multiplier = newServing / original;
    const adjustedIngredients = ingredients.map((ing) => {
      const amount = parseFloat(ing.amount);
      if (isNaN(amount)) return ing;

      return {
        ...ing,
        originalAmount: amount,
        newAmount: (amount * multiplier).toFixed(2),
      };
    });

    setResult({
      type: 'recipe',
      originalServings: original,
      newServings: newServing,
      multiplier: multiplier.toFixed(2),
      ingredients: adjustedIngredients,
    });
  };

  const calculateCalories = () => {
    setError('');

    if (!foodName || !weight || !caloriesPer100g) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    const weightNum = parseFloat(weight);
    const calories = parseFloat(caloriesPer100g);

    if (isNaN(weightNum) || isNaN(calories) || weightNum <= 0 || calories < 0) {
      setError('–í–µ—Å –∏ –∫–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏');
      return;
    }

    const totalCalories = (weightNum * calories) / 100;
    const macros = calculateMacros(calories, weightNum);

    setResult({
      type: 'calories',
      foodName,
      weight: weightNum,
      caloriesPer100g: calories,
      totalCalories: totalCalories.toFixed(1),
      macros,
    });
  };

  const calculatePortions = () => {
    setError('');

    if (!totalWeight || (!portionWeight && !portionCount)) {
      setError(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–±—â–∏–π –≤–µ—Å –∏ –ª–∏–±–æ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏, –ª–∏–±–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π'
      );
      return;
    }

    const total = parseFloat(totalWeight);
    const portion = portionWeight ? parseFloat(portionWeight) : 0;
    const count = portionCount ? parseInt(portionCount) : 0;

    if (isNaN(total) || total <= 0) {
      setError('–û–±—â–∏–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      return;
    }

    let calculatedPortions = 0;
    let calculatedWeight = 0;

    if (portion > 0) {
      calculatedPortions = Math.round(total / portion);
      calculatedWeight = portion;
    } else if (count > 0) {
      calculatedWeight = total / count;
      calculatedPortions = count;
    } else {
      setError('–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏, –ª–∏–±–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π');
      return;
    }

    setResult({
      type: 'portions',
      totalWeight: total,
      portionWeight: calculatedWeight.toFixed(1),
      portionCount: calculatedPortions,
      waste: (total - calculatedWeight * calculatedPortions).toFixed(1),
    });
  };

  const calculateMacros = (caloriesPer100g: number, weight: number) => {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    const proteinRatio = 0.25; // 25% –±–µ–ª–∫–∞
    const fatRatio = 0.35; // 35% –∂–∏—Ä–æ–≤
    const carbsRatio = 0.4; // 40% —É–≥–ª–µ–≤–æ–¥–æ–≤

    const totalCalories = (weight * caloriesPer100g) / 100;

    return {
      protein: ((totalCalories * proteinRatio) / 4).toFixed(1), // 4 –∫–∫–∞–ª –Ω–∞ –≥—Ä–∞–º–º –±–µ–ª–∫–∞
      fat: ((totalCalories * fatRatio) / 9).toFixed(1), // 9 –∫–∫–∞–ª –Ω–∞ –≥—Ä–∞–º–º –∂–∏—Ä–∞
      carbs: ((totalCalories * carbsRatio) / 4).toFixed(1), // 4 –∫–∫–∞–ª –Ω–∞ –≥—Ä–∞–º–º —É–≥–ª–µ–≤–æ–¥–æ–≤
    };
  };

  const addIngredient = () => {
    setIngredients([...ingredients, { name: '', amount: '', unit: '' }]);
  };

  const removeIngredient = (index: number) => {
    if (ingredients.length > 1) {
      setIngredients(ingredients.filter((_, i) => i !== index));
    }
  };

  const updateIngredient = (index: number, field: string, value: string) => {
    const newIngredients = [...ingredients];
    newIngredients[index] = { ...newIngredients[index], [field]: value };
    setIngredients(newIngredients);
  };

  const clearForm = () => {
    setCalculatorType('recipe');
    setOriginalServings('');
    setNewServings('');
    setIngredients([{ name: '', amount: '', unit: '' }]);
    setFoodName('');
    setWeight('');
    setCaloriesPer100g('');
    setTotalWeight('');
    setPortionWeight('');
    setPortionCount('');
    setResult(null);
    setError('');
  };

  const getUnitOptions = () => [
    '–≥',
    '–∫–≥',
    '–º–ª',
    '–ª',
    '—à—Ç',
    '—Å—Ç.–ª.',
    '—á.–ª.',
    '—Å—Ç–∞–∫–∞–Ω',
    '–ø–æ –≤–∫—É—Å—É',
  ];

  const getCookingRecommendations = (type: string, data: any): string[] => {
    const recommendations = [];

    if (type === 'recipe') {
      if (data.multiplier > 2) {
        recommendations.push(
          '–ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø–æ—Ä—Ü–∏–π –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è'
        );
        recommendations.push(
          '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à—É—é –ø–æ—Å—É–¥—É'
        );
      }
      if (data.multiplier < 0.5) {
        recommendations.push(
          '–ü—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –ø–æ—Ä—Ü–∏–π —É–º–µ–Ω—å—à–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è'
        );
        recommendations.push(
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—å—à—É—é –ø–æ—Å—É–¥—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
        );
      }
    } else if (type === 'calories') {
      if (data.totalCalories > 500) {
        recommendations.push(
          '–í—ã—Å–æ–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ—Ä—Ü–∏–∏'
        );
      }
      if (data.macros.protein > 30) {
        recommendations.push(
          '–ë–æ–≥–∞—Ç–æ–µ –±–µ–ª–∫–æ–º –±–ª—é–¥–æ - –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º—ã—à—Ü'
        );
      }
    } else if (type === 'portions') {
      if (data.waste > 0) {
        recommendations.push(
          '–ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –æ—Å—Ç–∞—Ç–æ–∫ - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏'
        );
      }
      if (data.portionCount > 10) {
        recommendations.push(
          '–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π - —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤'
        );
      }
    }

    recommendations.push('–í—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–π—Ç–µ –±–ª—é–¥–æ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π');
    recommendations.push('–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è');

    return recommendations;
  };

  return (
    <div className={`${styles.calculator} cookingCalculator`}>
      <div className="calculatorHeader">
        <h2>üë®‚Äçüç≥ –ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã</h2>
        <p>
          –ü–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã, —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Ä—Ü–∏–π
          –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –∫—É—Ö–Ω–µ.
        </p>
      </div>

      <div className={styles.calculatorTabs}>
        <button
          className={`tab ${calculatorType === 'recipe' ? 'active' : ''}`}
          onClick={() => setCalculatorType('recipe')}
        >
          üìù –ü–µ—Ä–µ—Å—á–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤
        </button>
        <button
          className={`tab ${calculatorType === 'calories' ? 'active' : ''}`}
          onClick={() => setCalculatorType('calories')}
        >
          üî• –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
        </button>
        <button
          className={`tab ${calculatorType === 'portions' ? 'active' : ''}`}
          onClick={() => setCalculatorType('portions')}
        >
          üçΩÔ∏è –†–∞–∑–º–µ—Ä—ã –ø–æ—Ä—Ü–∏–π
        </button>
      </div>

      {calculatorType === 'recipe' && (
        <form
          className="calculatorForm"
          onSubmit={(e) => {
            e.preventDefault();
            calculateRecipe();
          }}
        >
          <div className="inputGroup">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π</label>
            <div className="inputRow">
              <div>
                <label htmlFor="originalServings">–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                <input
                  id="originalServings"
                  type="number"
                  value={originalServings}
                  onChange={(e) => setOriginalServings(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 4"
                  min="1"
                  max="100"
                />
              </div>
              <div>
                <label htmlFor="newServings">–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                <input
                  id="newServings"
                  type="number"
                  value={newServings}
                  onChange={(e) => setNewServings(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 6"
                  min="1"
                  max="100"
                />
              </div>
            </div>
          </div>

          <div className="inputGroup">
            <label>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</label>
            {ingredients.map((ingredient, index) => (
              <div key={index} className={styles.ingredientRow}>
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"
                  value={ingredient.name}
                  onChange={(e) =>
                    updateIngredient(index, 'name', e.target.value)
                  }
                  className="ingredientName"
                />
                <input
                  type="number"
                  placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                  value={ingredient.amount}
                  onChange={(e) =>
                    updateIngredient(index, 'amount', e.target.value)
                  }
                  className="ingredientAmount"
                  step="0.1"
                  min="0"
                />
                <select
                  value={ingredient.unit}
                  onChange={(e) =>
                    updateIngredient(index, 'unit', e.target.value)
                  }
                  className="ingredientUnit"
                >
                  <option value="">–ï–¥–∏–Ω–∏—Ü–∞</option>
                  {getUnitOptions().map((unit) => (
                    <option key={unit} value={unit}>
                      {unit}
                    </option>
                  ))}
                </select>
                {ingredients.length > 1 && (
                  <button
                    type="button"
                    onClick={() => removeIngredient(index)}
                    className="removeIngredient"
                  >
                    ‚úï
                  </button>
                )}
              </div>
            ))}
            <button
              type="button"
              onClick={addIngredient}
              className={styles.addIngredient}
            >
              + –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
            </button>
          </div>

          {error && <div className="error">{error}</div>}

          <div className="inputGroup">
            <button type="submit" className="calculateBtn">
              –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
            </button>
          </div>
        </form>
      )}

      {calculatorType === 'calories' && (
        <form
          className="calculatorForm"
          onSubmit={(e) => {
            e.preventDefault();
            calculateCalories();
          }}
        >
          <div className="inputGroup">
            <label htmlFor="foodName">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/–±–ª—é–¥–∞</label>
            <input
              id="foodName"
              type="text"
              value={foodName}
              onChange={(e) => setFoodName(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞"
            />
          </div>

          <div className="inputGroup">
            <label>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</label>
            <div className="inputRow">
              <div>
                <label htmlFor="weight">–í–µ—Å (–≥)</label>
                <input
                  id="weight"
                  type="number"
                  value={weight}
                  onChange={(e) => setWeight(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 150"
                  step="1"
                  min="1"
                  max="10000"
                />
              </div>
              <div>
                <label htmlFor="caloriesPer100g">–ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100–≥</label>
                <input
                  id="caloriesPer100g"
                  type="number"
                  value={caloriesPer100g}
                  onChange={(e) => setCaloriesPer100g(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 165"
                  step="1"
                  min="0"
                  max="1000"
                />
              </div>
            </div>
          </div>

          {error && <div className="error">{error}</div>}

          <div className="inputGroup">
            <button type="submit" className="calculateBtn">
              –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏
            </button>
          </div>
        </form>
      )}

      {calculatorType === 'portions' && (
        <form
          className="calculatorForm"
          onSubmit={(e) => {
            e.preventDefault();
            calculatePortions();
          }}
        >
          <div className="inputGroup">
            <label htmlFor="totalWeight">–û–±—â–∏–π –≤–µ—Å –≥–æ—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞ (–≥)</label>
            <input
              id="totalWeight"
              type="number"
              value={totalWeight}
              onChange={(e) => setTotalWeight(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1000"
              step="10"
              min="10"
              max="100000"
            />
          </div>

          <div className="inputGroup">
            <label>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–π</label>
            <div className="inputRow">
              <div>
                <label htmlFor="portionWeight">–í–µ—Å –æ–¥–Ω–æ–π –ø–æ—Ä—Ü–∏–∏ (–≥)</label>
                <input
                  id="portionWeight"
                  type="number"
                  value={portionWeight}
                  onChange={(e) => setPortionWeight(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 200"
                  step="10"
                  min="10"
                  max="10000"
                />
              </div>
              <div>
                <label htmlFor="portionCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π</label>
                <input
                  id="portionCount"
                  type="number"
                  value={portionCount}
                  onChange={(e) => setPortionCount(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 5"
                  min="1"
                  max="100"
                />
              </div>
            </div>
            <div className="help">
              –£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏, –ª–∏–±–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π - –≤—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç
              —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            </div>
          </div>

          {error && <div className="error">{error}</div>}

          <div className="inputGroup">
            <button type="submit" className="calculateBtn">
              –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ä—Ü–∏–∏
            </button>
          </div>
        </form>
      )}

      {result && (
        <div className="result">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>

          {result.type === 'recipe' && (
            <div className="recipeResult">
              <div className="recipeSummary">
                <div className="summaryItem">
                  <span className="label">–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:</span>
                  <span className="value">{result.originalServings}</span>
                </div>
                <div className="summaryItem">
                  <span className="label">–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:</span>
                  <span className="value">{result.newServings}</span>
                </div>
                <div className="summaryItem">
                  <span className="label">–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</span>
                  <span className="value">{result.multiplier}x</span>
                </div>
              </div>

              <div className="ingredientsTable">
                <h4>–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</h4>
                <table>
                  <thead>
                    <tr>
                      <th>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç</th>
                      <th>–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                      <th>–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                      <th>–ï–¥–∏–Ω–∏—Ü–∞</th>
                    </tr>
                  </thead>
                  <tbody>
                    {result.ingredients.map((ing: any, index: number) => (
                      <tr key={index}>
                        <td>{ing.name}</td>
                        <td>
                          {ing.originalAmount} {ing.unit}
                        </td>
                        <td>
                          {ing.newAmount} {ing.unit}
                        </td>
                        <td>{ing.unit}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {result.type === 'calories' && (
            <div className="caloriesResult">
              <div className="caloriesSummary">
                <div className="summaryItem">
                  <span className="label">–ü—Ä–æ–¥—É–∫—Ç:</span>
                  <span className="value">{result.foodName}</span>
                </div>
                <div className="summaryItem">
                  <span className="label">–í–µ—Å:</span>
                  <span className="value">{result.weight} –≥</span>
                </div>
                <div className="summaryItem">
                  <span className="label">–ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100–≥:</span>
                  <span className="value">{result.caloriesPer100g} –∫–∫–∞–ª</span>
                </div>
              </div>

              <div className="resultValue">
                <span className="amount">{result.totalCalories}</span>
                <span className="unit">–∫–∫–∞–ª</span>
              </div>

              <div className="macrosAnalysis">
                <h4>–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</h4>
                <div className="macrosGrid">
                  <div className="macroItem protein">
                    <span className="label">–ë–µ–ª–∫–∏:</span>
                    <span className="value">{result.macros.protein} –≥</span>
                  </div>
                  <div className="macroItem fat">
                    <span className="label">–ñ–∏—Ä—ã:</span>
                    <span className="value">{result.macros.fat} –≥</span>
                  </div>
                  <div className="macroItem carbs">
                    <span className="label">–£–≥–ª–µ–≤–æ–¥—ã:</span>
                    <span className="value">{result.macros.carbs} –≥</span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {result.type === 'portions' && (
            <div className="portionsResult">
              <div className="portionsSummary">
                <div className="summaryItem">
                  <span className="label">–û–±—â–∏–π –≤–µ—Å –±–ª—é–¥–∞:</span>
                  <span className="value">{result.totalWeight} –≥</span>
                </div>
                <div className="summaryItem">
                  <span className="label">–í–µ—Å –æ–¥–Ω–æ–π –ø–æ—Ä—Ü–∏–∏:</span>
                  <span className="value">{result.portionWeight} –≥</span>
                </div>
                <div className="summaryItem">
                  <span className="label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:</span>
                  <span className="value">{result.portionCount}</span>
                </div>
                {parseFloat(result.waste) > 0 && (
                  <div className="summaryItem">
                    <span className="label">–û—Å—Ç–∞—Ç–æ–∫:</span>
                    <span className="value">{result.waste} –≥</span>
                  </div>
                )}
              </div>

              <div className="resultValue">
                <span className="amount">{result.portionWeight}</span>
                <span className="unit">–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é</span>
              </div>
            </div>
          )}

          <div className="recommendation">
            <strong>–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</strong>
            <ul className="recommendationsList">
              {getCookingRecommendations(result.type, result).map(
                (rec: string, index: number) => (
                  <li key={index}>{rec}</li>
                )
              )}
            </ul>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default CookingCalculator;

import React, { useState } from 'react';
import styles from './PaintCalculator.module.scss';

const PaintCalculator: React.FC = () => {
  const [roomType, setRoomType] = useState('bedroom');
  const [wallHeight, setWallHeight] = useState('');
  const [wallLength, setWallLength] = useState('');
  const [wallWidth, setWallWidth] = useState('');
  const [windowsCount, setWindowsCount] = useState('0');
  const [doorsCount, setDoorsCount] = useState('0');
  const [coats, setCoats] = useState('2');
  const [paintType, setPaintType] = useState('water');
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState('');

  const calculatePaint = () => {
    setError('');

    if (!wallHeight || !wallLength || !wallWidth) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è');
      return;
    }

    const height = parseFloat(wallHeight);
    const length = parseFloat(wallLength);
    const width = parseFloat(wallWidth);
    const windows = parseInt(windowsCount);
    const doors = parseInt(doorsCount);
    const coatsCount = parseInt(coats);

    if (
      isNaN(height) ||
      isNaN(length) ||
      isNaN(width) ||
      height <= 0 ||
      length <= 0 ||
      width <= 0
    ) {
      setError('–†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏');
      return;
    }

    // –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–ø–µ—Ä–∏–º–µ—Ç—Ä √ó –≤—ã—Å–æ—Ç–∞)
    const perimeter = 2 * (length + width);
    const wallArea = perimeter * height;

    // –ü–ª–æ—â–∞–¥—å –ø—Ä–æ–µ–º–æ–≤
    const windowArea = windows * 1.5; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–∫–Ω–∞ 1.5 –º¬≤
    const doorArea = doors * 2.1; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–∏ 2.1 –º¬≤
    const openingsArea = windowArea + doorArea;

    // –ü–ª–æ—â–∞–¥—å –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏
    const paintArea = wallArea - openingsArea;

    if (paintArea <= 0) {
      setError('–ü–ª–æ—â–∞–¥—å –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    // –†–∞—Å—Ö–æ–¥ –∫—Ä–∞—Å–∫–∏ –Ω–∞ –º¬≤ (–≤ –ª–∏—Ç—Ä–∞—Ö)
    const paintConsumption = getPaintConsumption(paintType);

    // –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫—Ä–∞—Å–∫–∏
    const totalPaint = (paintArea * paintConsumption * coatsCount) / 1000; // –≤ –ª–∏—Ç—Ä–∞—Ö

    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–∫
    const canSizes = getCanSizes(paintType);
    const recommendedCans = calculateRecommendedCans(totalPaint, canSizes);

    setResult({
      wallArea: wallArea.toFixed(2),
      openingsArea: openingsArea.toFixed(2),
      paintArea: paintArea.toFixed(2),
      totalPaint: totalPaint.toFixed(2),
      recommendedCans,
      paintType: getPaintTypeName(paintType),
      coatsCount,
    });
  };

  const getPaintConsumption = (type: string): number => {
    switch (type) {
      case 'water':
        return 0.25; // –í–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è
      case 'acrylic':
        return 0.2; // –ê–∫—Ä–∏–ª–æ–≤–∞—è
      case 'latex':
        return 0.15; // –õ–∞—Ç–µ–∫—Å–Ω–∞—è
      case 'oil':
        return 0.3; // –ú–∞—Å–ª—è–Ω–∞—è
      case 'alkyd':
        return 0.25; // –ê–ª–∫–∏–¥–Ω–∞—è
      default:
        return 0.25;
    }
  };

  const getPaintTypeName = (type: string): string => {
    switch (type) {
      case 'water':
        return '–í–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è';
      case 'acrylic':
        return '–ê–∫—Ä–∏–ª–æ–≤–∞—è';
      case 'latex':
        return '–õ–∞—Ç–µ–∫—Å–Ω–∞—è';
      case 'oil':
        return '–ú–∞—Å–ª—è–Ω–∞—è';
      case 'alkyd':
        return '–ê–ª–∫–∏–¥–Ω–∞—è';
      default:
        return '–í–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è';
    }
  };

  const getCanSizes = (type: string): number[] => {
    switch (type) {
      case 'water':
        return [0.9, 2.7, 9, 18]; // –ª
      case 'acrylic':
        return [0.9, 2.7, 9, 18];
      case 'latex':
        return [0.9, 2.7, 9, 18];
      case 'oil':
        return [0.5, 1, 2.5, 5]; // –ª
      case 'alkyd':
        return [0.5, 1, 2.5, 5];
      default:
        return [0.9, 2.7, 9, 18];
    }
  };

  const calculateRecommendedCans = (
    totalPaint: number,
    canSizes: number[]
  ): any[] => {
    const recommendations = [];
    let remainingPaint = totalPaint;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–∞–Ω–æ–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    const sortedSizes = [...canSizes].sort((a, b) => b - a);

    for (const size of sortedSizes) {
      if (remainingPaint >= size * 0.8) {
        // –ü–æ–∫—É–ø–∞–µ–º –±–∞–Ω–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 80% –æ—Ç –Ω–µ—ë
        const count = Math.ceil(remainingPaint / size);
        recommendations.push({
          size,
          count,
          volume: (size * count).toFixed(1),
        });
        remainingPaint = 0;
        break;
      }
    }

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Å—Ç–∞—Ç–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –±–∞–Ω–∫—É
    if (remainingPaint > 0) {
      const smallestCan = Math.min(...canSizes);
      recommendations.push({
        size: smallestCan,
        count: 1,
        volume: smallestCan.toFixed(1),
        note: '–î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ–¥–∫—Ä–∞—Å–æ–∫',
      });
    }

    return recommendations;
  };

  const clearForm = () => {
    setRoomType('bedroom');
    setWallHeight('');
    setWallLength('');
    setWallWidth('');
    setWindowsCount('0');
    setDoorsCount('0');
    setCoats('2');
    setPaintType('water');
    setResult(null);
    setError('');
  };

  const getRoomTypeName = (type: string): string => {
    switch (type) {
      case 'bedroom':
        return '–°–ø–∞–ª—å–Ω—è';
      case 'living':
        return '–ì–æ—Å—Ç–∏–Ω–∞—è';
      case 'kitchen':
        return '–ö—É—Ö–Ω—è';
      case 'bathroom':
        return '–í–∞–Ω–Ω–∞—è';
      case 'hallway':
        return '–ü—Ä–∏—Ö–æ–∂–∞—è';
      case 'office':
        return '–ö–∞–±–∏–Ω–µ—Ç';
      default:
        return '–ü–æ–º–µ—â–µ–Ω–∏–µ';
    }
  };

  return (
    <div className={`${styles.calculator} paintCalculator`}>
      <div className="calculatorHeader">
        <h2>üé® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä–∞—Å–∫–∏ –¥–ª—è —Å—Ç–µ–Ω</h2>
        <p>
          –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ —Å—Ç–µ–Ω.
          –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ä–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è, –ø—Ä–æ–µ–º—ã –∏ —Ç–∏–ø –∫—Ä–∞—Å–∫–∏.
        </p>
      </div>

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          calculatePaint();
        }}
      >
        <div className="inputGroup">
          <label htmlFor="roomType">–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è</label>
          <select
            id="roomType"
            value={roomType}
            onChange={(e) => setRoomType(e.target.value)}
          >
            <option value="bedroom">üõèÔ∏è –°–ø–∞–ª—å–Ω—è</option>
            <option value="living">üõãÔ∏è –ì–æ—Å—Ç–∏–Ω–∞—è</option>
            <option value="kitchen">üç≥ –ö—É—Ö–Ω—è</option>
            <option value="bathroom">üöø –í–∞–Ω–Ω–∞—è</option>
            <option value="hallway">üö™ –ü—Ä–∏—Ö–æ–∂–∞—è</option>
            <option value="office">üíº –ö–∞–±–∏–Ω–µ—Ç</option>
          </select>
          <div className="help">
            {getRoomTypeName(roomType)} - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ
            —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
          </div>
        </div>

        <div className="inputGroup">
          <label>–†–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è</label>
          <div className="inputGrid">
            <div>
              <label htmlFor="wallHeight">–í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω (–º)</label>
              <input
                id="wallHeight"
                type="number"
                value={wallHeight}
                onChange={(e) => setWallHeight(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2.7"
                step="0.1"
                min="1"
                max="10"
              />
            </div>
            <div>
              <label htmlFor="wallLength">–î–ª–∏–Ω–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–º)</label>
              <input
                id="wallLength"
                type="number"
                value={wallLength}
                onChange={(e) => setWallLength(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 4.5"
                step="0.1"
                min="1"
                max="20"
              />
            </div>
            <div>
              <label htmlFor="wallWidth">–®–∏—Ä–∏–Ω–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–º)</label>
              <input
                id="wallWidth"
                type="number"
                value={wallWidth}
                onChange={(e) => setWallWidth(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 3.2"
                step="0.1"
                min="1"
                max="20"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–ü—Ä–æ–µ–º—ã –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏</label>
          <div className="inputRow">
            <div>
              <label htmlFor="windowsCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω</label>
              <input
                id="windowsCount"
                type="number"
                value={windowsCount}
                onChange={(e) => setWindowsCount(e.target.value)}
                placeholder="0"
                min="0"
                max="10"
              />
            </div>
            <div>
              <label htmlFor="doorsCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π</label>
              <input
                id="doorsCount"
                type="number"
                value={doorsCount}
                onChange={(e) => setDoorsCount(e.target.value)}
                placeholder="0"
                min="0"
                max="5"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—Ä–∞—Å–∫–∏</label>
          <div className="inputRow">
            <div>
              <label htmlFor="coats">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤</label>
              <select
                id="coats"
                value={coats}
                onChange={(e) => setCoats(e.target.value)}
              >
                <option value="1">1 —Å–ª–æ–π</option>
                <option value="2">2 —Å–ª–æ—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</option>
                <option value="3">3 —Å–ª–æ—è</option>
              </select>
            </div>
            <div>
              <label htmlFor="paintType">–¢–∏–ø –∫—Ä–∞—Å–∫–∏</label>
              <select
                id="paintType"
                value={paintType}
                onChange={(e) => setPaintType(e.target.value)}
              >
                <option value="water">–í–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è</option>
                <option value="acrylic">–ê–∫—Ä–∏–ª–æ–≤–∞—è</option>
                <option value="latex">–õ–∞—Ç–µ–∫—Å–Ω–∞—è</option>
                <option value="oil">–ú–∞—Å–ª—è–Ω–∞—è</option>
                <option value="alkyd">–ê–ª–∫–∏–¥–Ω–∞—è</option>
              </select>
            </div>
          </div>
        </div>

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–∫–∏
          </button>
        </div>
      </form>

      {result && (
        <div className="result">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>

          <div className="paintSummary">
            <div className="summaryItem">
              <span className="label">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω:</span>
              <span className="value">{result.wallArea} –º¬≤</span>
            </div>
            <div className="summaryItem">
              <span className="label">–ü–ª–æ—â–∞–¥—å –ø—Ä–æ–µ–º–æ–≤:</span>
              <span className="value">{result.openingsArea} –º¬≤</span>
            </div>
            <div className="summaryItem">
              <span className="label">–ü–ª–æ—â–∞–¥—å –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏:</span>
              <span className="value">{result.paintArea} –º¬≤</span>
            </div>
            <div className="summaryItem">
              <span className="label">–¢–∏–ø –∫—Ä–∞—Å–∫–∏:</span>
              <span className="value">{result.paintType}</span>
            </div>
            <div className="summaryItem">
              <span className="label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤:</span>
              <span className="value">{result.coatsCount}</span>
            </div>
          </div>

          <div className="resultValue">
            <span className="amount">{result.totalPaint}</span>
            <span className="unit">–ª–∏—Ç—Ä–æ–≤ –∫—Ä–∞—Å–∫–∏</span>
          </div>

          <div className="recommendation">
            <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–∞–Ω–∫–∏:</strong>
            <div className="canRecommendations">
              {result.recommendedCans.map((can: any, index: number) => (
                <div key={index} className="canItem">
                  {can.count} √ó {can.size} –ª = {can.volume} –ª
                  {can.note && <span className="note"> ({can.note})</span>}
                </div>
              ))}
            </div>
            <p style={{ marginTop: '1rem', fontSize: '0.9rem' }}>
              <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ–∫—É–ø–∞–π—Ç–µ –∫—Ä–∞—Å–∫—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º
              (10-15%) –¥–ª—è –ø–æ–¥–∫—Ä–∞—Å–æ–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
            </p>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default PaintCalculator;

import React, { useState } from 'react';
import styles from './DistanceCalculator.module.scss';

const DistanceCalculator: React.FC = () => {
  const [lat1, setLat1] = useState('');
  const [lon1, setLon1] = useState('');
  const [lat2, setLat2] = useState('');
  const [lon2, setLon2] = useState('');
  const [unit, setUnit] = useState('km');
  const [result, setResult] = useState<number | null>(null);
  const [error, setError] = useState('');

  const calculateDistance = () => {
    setError('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
    if (!lat1 || !lon1 || !lat2 || !lon2) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    const lat1Num = parseFloat(lat1);
    const lon1Num = parseFloat(lon1);
    const lat2Num = parseFloat(lat2);
    const lon2Num = parseFloat(lon2);

    if (isNaN(lat1Num) || isNaN(lon1Num) || isNaN(lat2Num) || isNaN(lon2Num)) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
      return;
    }

    if (lat1Num < -90 || lat1Num > 90 || lat2Num < -90 || lat2Num > 90) {
      setError('–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -90 –¥–æ 90 –≥—Ä–∞–¥—É—Å–æ–≤');
      return;
    }

    if (lon1Num < -180 || lon1Num > 180 || lon2Num < -180 || lon2Num > 180) {
      setError('–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -180 –¥–æ 180 –≥—Ä–∞–¥—É—Å–æ–≤');
      return;
    }

    // –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ —Å—Ñ–µ—Ä–µ
    const R = unit === 'km' ? 6371 : unit === 'miles' ? 3959 : 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏
    const dLat = ((lat2Num - lat1Num) * Math.PI) / 180;
    const dLon = ((lon2Num - lon1Num) * Math.PI) / 180;
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((lat1Num * Math.PI) / 180) *
        Math.cos((lat2Num * Math.PI) / 180) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;

    setResult(distance);
  };

  const clearForm = () => {
    setLat1('');
    setLon1('');
    setLat2('');
    setLon2('');
    setResult(null);
    setError('');
  };

  const getUnitLabel = () => {
    switch (unit) {
      case 'km':
        return '–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤';
      case 'miles':
        return '–º–∏–ª—å';
      case 'm':
        return '–º–µ—Ç—Ä–æ–≤';
      default:
        return '–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤';
    }
  };

  return (
    <div className={`${styles.calculator} coordinatesCalculator`}>
      <div className="calculatorHeader">
        <h2>üåç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏</h2>
        <p>
          –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ó–µ–º–ª–µ –ø–æ –∏—Ö
          –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è
          —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.
        </p>
      </div>

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          calculateDistance();
        }}
      >
        <div className="inputGroup">
          <label>–ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞</label>
          <div className="inputGrid">
            <div>
              <label htmlFor="lat1">–®–∏—Ä–æ—Ç–∞ (–æ—Ç -90 –¥–æ 90)</label>
              <input
                id="lat1"
                type="number"
                value={lat1}
                onChange={(e) => setLat1(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 55.7558"
                step="any"
                min="-90"
                max="90"
              />
            </div>
            <div>
              <label htmlFor="lon1">–î–æ–ª–≥–æ—Ç–∞ (–æ—Ç -180 –¥–æ 180)</label>
              <input
                id="lon1"
                type="number"
                value={lon1}
                onChange={(e) => setLon1(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 37.6176"
                step="any"
                min="-180"
                max="180"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–í—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞</label>
          <div className="inputGrid">
            <div>
              <label htmlFor="lat2">–®–∏—Ä–æ—Ç–∞ (–æ—Ç -90 –¥–æ 90)</label>
              <input
                id="lat2"
                type="number"
                value={lat2}
                onChange={(e) => setLat2(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 59.9311"
                step="any"
                min="-90"
                max="90"
              />
            </div>
            <div>
              <label htmlFor="lon2">–î–æ–ª–≥–æ—Ç–∞ (–æ—Ç -180 –¥–æ 180)</label>
              <input
                id="lon2"
                type="number"
                value={lon2}
                onChange={(e) => setLon2(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 30.3609"
                step="any"
                min="-180"
                max="180"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label htmlFor="unit">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
          <select
            id="unit"
            value={unit}
            onChange={(e) => setUnit(e.target.value)}
          >
            <option value="km">–ö–∏–ª–æ–º–µ—Ç—Ä—ã</option>
            <option value="miles">–ú–∏–ª–∏</option>
            <option value="m">–ú–µ—Ç—Ä—ã</option>
          </select>
        </div>

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
          </button>
        </div>
      </form>

      {result !== null && (
        <div className="result">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>
          <div className="resultValue">
            <span className="amount">{result.toFixed(2)}</span>
            <span className="unit">{getUnitLabel()}</span>
          </div>
          <p className="recommendation">
            <strong>–°–æ–≤–µ—Ç:</strong> –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
            –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
          </p>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default DistanceCalculator;

import React, { useState } from 'react';
import styles from './TileCalculator.module.scss';

const TileCalculator: React.FC = () => {
  const [roomType, setRoomType] = useState('bathroom');
  const [wallHeight, setWallHeight] = useState('');
  const [wallLength, setWallLength] = useState('');
  const [wallWidth, setWallWidth] = useState('');
  const [windowsCount, setWindowsCount] = useState('0');
  const [doorsCount, setDoorsCount] = useState('0');
  const [tileSize, setTileSize] = useState('300x300');
  const [groutWidth, setGroutWidth] = useState('2');
  const [wastage, setWastage] = useState('10');
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState('');

  const calculateTiles = () => {
    setError('');

    if (!wallHeight || !wallLength || !wallWidth) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è');
      return;
    }

    const height = parseFloat(wallHeight);
    const length = parseFloat(wallLength);
    const width = parseFloat(wallWidth);
    const windows = parseInt(windowsCount);
    const doors = parseInt(doorsCount);
    const grout = parseFloat(groutWidth);
    const wastagePercent = parseFloat(wastage);

    if (
      isNaN(height) ||
      isNaN(length) ||
      isNaN(width) ||
      height <= 0 ||
      length <= 0 ||
      width <= 0
    ) {
      setError('–†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏');
      return;
    }

    // –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–ø–µ—Ä–∏–º–µ—Ç—Ä √ó –≤—ã—Å–æ—Ç–∞)
    const perimeter = 2 * (length + width);
    const wallArea = perimeter * height;

    // –ü–ª–æ—â–∞–¥—å –ø—Ä–æ–µ–º–æ–≤
    const windowArea = windows * 1.5; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–∫–Ω–∞ 1.5 –º¬≤
    const doorArea = doors * 2.1; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–∏ 2.1 –º¬≤
    const openingsArea = windowArea + doorArea;

    // –ü–ª–æ—â–∞–¥—å –¥–ª—è –æ–±–ª–∏—Ü–æ–≤–∫–∏
    const tileArea = wallArea - openingsArea;

    if (tileArea <= 0) {
      setError('–ü–ª–æ—â–∞–¥—å –¥–ª—è –æ–±–ª–∏—Ü–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    // –†–∞–∑–º–µ—Ä—ã –ø–ª–∏—Ç–∫–∏
    const [tileLength, tileWidth] = tileSize.split('x').map(Number);
    const tileAreaSingle = (tileLength * tileWidth) / 1000000; // –≤ –º¬≤

    // –£—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —à–≤–æ–≤
    const effectiveTileArea =
      ((tileLength + grout) * (tileWidth + grout)) / 1000000;

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∏—Ç–æ–∫
    const tilesNeeded = Math.ceil(tileArea / effectiveTileArea);

    // –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∞—Å –Ω–∞ –æ—Ç—Ö–æ–¥—ã
    const wastageMultiplier = 1 + wastagePercent / 100;
    const totalTiles = Math.ceil(tilesNeeded * wastageMultiplier);

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫
    const tilesPerPack = getTilesPerPack(tileSize);
    const packsNeeded = Math.ceil(totalTiles / tilesPerPack);

    // –°—Ç–æ–∏–º–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
    const pricePerPack = getPricePerPack(tileSize);
    const totalCost = packsNeeded * pricePerPack;

    setResult({
      wallArea: wallArea.toFixed(2),
      openingsArea: openingsArea.toFixed(2),
      tileArea: tileArea.toFixed(2),
      tileSize: `${tileLength}√ó${tileWidth} –º–º`,
      tilesNeeded,
      totalTiles,
      packsNeeded,
      tilesPerPack,
      totalCost: totalCost.toFixed(0),
      groutWidth: grout,
      wastagePercent,
    });
  };

  const getTilesPerPack = (size: string): number => {
    switch (size) {
      case '200x200':
        return 25;
      case '250x250':
        return 16;
      case '300x300':
        return 11;
      case '400x400':
        return 6;
      case '500x500':
        return 4;
      case '600x600':
        return 3;
      case '300x600':
        return 8;
      case '400x800':
        return 3;
      default:
        return 11;
    }
  };

  const getPricePerPack = (size: string): number => {
    switch (size) {
      case '200x200':
        return 800;
      case '250x250':
        return 1200;
      case '300x300':
        return 1500;
      case '400x400':
        return 2500;
      case '500x500':
        return 3500;
      case '600x600':
        return 4500;
      case '300x600':
        return 2000;
      case '400x800':
        return 3500;
      default:
        return 1500;
    }
  };

  const clearForm = () => {
    setRoomType('bathroom');
    setWallHeight('');
    setWallLength('');
    setWallWidth('');
    setWindowsCount('0');
    setDoorsCount('0');
    setTileSize('300x300');
    setGroutWidth('2');
    setWastage('10');
    setResult(null);
    setError('');
  };

  const getRoomTypeName = (type: string): string => {
    switch (type) {
      case 'bathroom':
        return '–í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞';
      case 'toilet':
        return '–¢—É–∞–ª–µ—Ç';
      case 'kitchen':
        return '–ö—É—Ö–Ω—è';
      case 'corridor':
        return '–ö–æ—Ä–∏–¥–æ—Ä';
      case 'balcony':
        return '–ë–∞–ª–∫–æ–Ω/–õ–æ–¥–∂–∏—è';
      case 'other':
        return '–î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ';
      default:
        return '–ü–æ–º–µ—â–µ–Ω–∏–µ';
    }
  };

  const getTileSizeName = (size: string): string => {
    switch (size) {
      case '200x200':
        return '200√ó200 –º–º (–º–µ–ª–∫–∞—è)';
      case '250x250':
        return '250√ó250 –º–º (–º–µ–ª–∫–∞—è)';
      case '300x300':
        return '300√ó300 –º–º (—Å—Ä–µ–¥–Ω—è—è)';
      case '400x400':
        return '400√ó400 –º–º (—Å—Ä–µ–¥–Ω—è—è)';
      case '500x500':
        return '500√ó500 –º–º (–∫—Ä—É–ø–Ω–∞—è)';
      case '600x600':
        return '600√ó600 –º–º (–∫—Ä—É–ø–Ω–∞—è)';
      case '300x600':
        return '300√ó600 –º–º (–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–Ω–∏—Ç)';
      case '400x800':
        return '400√ó800 –º–º (–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–Ω–∏—Ç)';
      default:
        return '300√ó300 –º–º';
    }
  };

  return (
    <div className={`${styles.calculator} tileCalculator`}>
      <div className="calculatorHeader">
        <h2>üß± –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–∏—Ç–∫–∏</h2>
        <p>
          –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∏—Ç–∫–∏ –¥–ª—è –æ–±–ª–∏—Ü–æ–≤–∫–∏ —Å—Ç–µ–Ω.
          –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ä–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è, –ø—Ä–æ–µ–º—ã, —Ä–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏ –∏ –æ—Ç—Ö–æ–¥—ã.
        </p>
      </div>

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          calculateTiles();
        }}
      >
        <div className="inputGroup">
          <label htmlFor="roomType">–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è</label>
          <select
            id="roomType"
            value={roomType}
            onChange={(e) => setRoomType(e.target.value)}
          >
            <option value="bathroom">üöø –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞</option>
            <option value="toilet">üöΩ –¢—É–∞–ª–µ—Ç</option>
            <option value="kitchen">üç≥ –ö—É—Ö–Ω—è</option>
            <option value="corridor">üö™ –ö–æ—Ä–∏–¥–æ—Ä</option>
            <option value="balcony">üè† –ë–∞–ª–∫–æ–Ω/–õ–æ–¥–∂–∏—è</option>
            <option value="other">üè¢ –î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ</option>
          </select>
          <div className="help">
            {getRoomTypeName(roomType)} - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ
            —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
          </div>
        </div>

        <div className="inputGroup">
          <label>–†–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è</label>
          <div className="inputGrid">
            <div>
              <label htmlFor="wallHeight">–í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω (–º)</label>
              <input
                id="wallHeight"
                type="number"
                value={wallHeight}
                onChange={(e) => setWallHeight(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2.7"
                step="0.1"
                min="1"
                max="10"
              />
            </div>
            <div>
              <label htmlFor="wallLength">–î–ª–∏–Ω–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–º)</label>
              <input
                id="wallLength"
                type="number"
                value={wallLength}
                onChange={(e) => setWallLength(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5"
                step="0.1"
                min="1"
                max="20"
              />
            </div>
            <div>
              <label htmlFor="wallWidth">–®–∏—Ä–∏–Ω–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–º)</label>
              <input
                id="wallWidth"
                type="number"
                value={wallWidth}
                onChange={(e) => setWallWidth(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1.8"
                step="0.1"
                min="1"
                max="20"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–ü—Ä–æ–µ–º—ã –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏</label>
          <div className="inputRow">
            <div>
              <label htmlFor="windowsCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω</label>
              <input
                id="windowsCount"
                type="number"
                value={windowsCount}
                onChange={(e) => setWindowsCount(e.target.value)}
                placeholder="0"
                min="0"
                max="5"
              />
            </div>
            <div>
              <label htmlFor="doorsCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π</label>
              <input
                id="doorsCount"
                type="number"
                value={doorsCount}
                onChange={(e) => setDoorsCount(e.target.value)}
                placeholder="0"
                min="0"
                max="3"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∏—Ç–∫–∏</label>
          <div className="inputRow">
            <div>
              <label htmlFor="tileSize">–†–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏</label>
              <select
                id="tileSize"
                value={tileSize}
                onChange={(e) => setTileSize(e.target.value)}
              >
                <option value="200x200">200√ó200 –º–º</option>
                <option value="250x250">250√ó250 –º–º</option>
                <option value="300x300">300√ó300 –º–º</option>
                <option value="400x400">400√ó400 –º–º</option>
                <option value="500x500">500√ó500 –º–º</option>
                <option value="600x600">600√ó600 –º–º</option>
                <option value="300x600">300√ó600 –º–º</option>
                <option value="400x800">400√ó800 –º–º</option>
              </select>
              <div className="help">{getTileSizeName(tileSize)}</div>
            </div>
            <div>
              <label htmlFor="groutWidth">–®–∏—Ä–∏–Ω–∞ —à–≤–æ–≤ (–º–º)</label>
              <select
                id="groutWidth"
                value={groutWidth}
                onChange={(e) => setGroutWidth(e.target.value)}
              >
                <option value="1">1 –º–º</option>
                <option value="2">2 –º–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</option>
                <option value="3">3 –º–º</option>
                <option value="4">4 –º–º</option>
                <option value="5">5 –º–º</option>
              </select>
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label htmlFor="wastage">–ó–∞–ø–∞—Å –Ω–∞ –æ—Ç—Ö–æ–¥—ã (%)</label>
          <select
            id="wastage"
            value={wastage}
            onChange={(e) => setWastage(e.target.value)}
          >
            <option value="5">5% (–º–∏–Ω–∏–º—É–º)</option>
            <option value="10">10% (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</option>
            <option value="15">15% (—Å –∑–∞–ø–∞—Å–æ–º)</option>
            <option value="20">20% (–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å)</option>
          </select>
          <div className="help">
            –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–µ–∑–∫–∏, –±—Ä–∞–∫ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–∫–ª–∞–¥–∫–µ
          </div>
        </div>

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∏—Ç–∫–∏
          </button>
        </div>
      </form>

      {result && (
        <div className="result">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>

          <div className={styles.tileSummary}>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω:</span>
              <span className={styles.value}>{result.wallArea} –º¬≤</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ü–ª–æ—â–∞–¥—å –ø—Ä–æ–µ–º–æ–≤:</span>
              <span className={styles.value}>{result.openingsArea} –º¬≤</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ü–ª–æ—â–∞–¥—å –¥–ª—è –æ–±–ª–∏—Ü–æ–≤–∫–∏:</span>
              <span className={styles.value}>{result.tileArea} –º¬≤</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–†–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏:</span>
              <span className={styles.value}>{result.tileSize}</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–®–∏—Ä–∏–Ω–∞ —à–≤–æ–≤:</span>
              <span className={styles.value}>{result.groutWidth} –º–º</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ó–∞–ø–∞—Å –Ω–∞ –æ—Ç—Ö–æ–¥—ã:</span>
              <span className={styles.value}>{result.wastagePercent}%</span>
            </div>
          </div>

          <div className={styles.resultValue}>
            <span className={styles.amount}>{result.totalTiles}</span>
            <span className={styles.unit}>–ø–ª–∏—Ç–æ–∫</span>
          </div>

          <div className={styles.recommendation}>
            <strong>–ü–æ–∫—É–ø–∫–∞:</strong>
            <div className={styles.purchaseInfo}>
              <p>
                <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫:</strong> {result.packsNeeded} —à—Ç.
              </p>
              <p>
                <strong>–ü–ª–∏—Ç–æ–∫ –≤ —É–ø–∞–∫–æ–≤–∫–µ:</strong> {result.tilesPerPack} —à—Ç.
              </p>
              <p>
                <strong>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {result.totalCost} ‚ÇΩ
              </p>
            </div>
            <p style={{ marginTop: '1rem', fontSize: '0.9rem' }}>
              <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∏—Ç–∫—É –∏–∑ –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ –¥–ª—è
              –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –æ—Ç—Ç–µ–Ω–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∑—è—Ç—å –Ω–∞ 1-2 —É–ø–∞–∫–æ–≤–∫–∏ –±–æ–ª—å—à–µ
              –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.
            </p>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default TileCalculator;

import React, { useState } from 'react';
import styles from './InvestmentCalculator.module.scss';

const InvestmentCalculator: React.FC = () => {
  const [initialInvestment, setInitialInvestment] = useState('');
  const [monthlyContribution, setMonthlyContribution] = useState('');
  const [annualReturn, setAnnualReturn] = useState('');
  const [investmentPeriod, setInvestmentPeriod] = useState('10');
  const [inflationRate, setInflationRate] = useState('3');
  const [taxRate, setTaxRate] = useState('13');
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState('');

  const calculateInvestment = () => {
    setError('');

    if (!initialInvestment || !monthlyContribution || !annualReturn) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    const initial = parseFloat(initialInvestment);
    const monthly = parseFloat(monthlyContribution);
    const returnRate = parseFloat(annualReturn);
    const period = parseInt(investmentPeriod);
    const inflation = parseFloat(inflationRate);
    const tax = parseFloat(taxRate);

    if (isNaN(initial) || isNaN(monthly) || isNaN(returnRate)) {
      setError('–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏');
      return;
    }

    if (initial < 0 || monthly < 0 || returnRate < -100 || returnRate > 100) {
      setError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
      return;
    }

    if (period <= 0 || period > 50) {
      setError('–ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 –ª–µ—Ç');
      return;
    }

    // –†–∞—Å—á–µ—Ç –±–µ–∑ —É—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    const monthlyReturn = returnRate / 100 / 12;
    const totalMonths = period * 12;

    let totalInvestment = initial;
    let totalContributions = initial;

    // –†–∞—Å—á–µ—Ç —Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º–∏ –≤–∑–Ω–æ—Å–∞–º–∏
    for (let month = 1; month <= totalMonths; month++) {
      totalInvestment = totalInvestment * (1 + monthlyReturn) + monthly;
      totalContributions += monthly;
    }

    // –†–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏
    const inflationMultiplier = Math.pow(1 - inflation / 100, period);
    const realValue = totalInvestment * inflationMultiplier;

    // –†–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤
    const gains = totalInvestment - totalContributions;
    const taxAmount = gains * (tax / 100);
    const afterTaxValue = totalInvestment - taxAmount;

    // –ì–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç
    const yearlyGrowth = [];
    let currentValue = initial;
    let currentContributions = initial;

    for (let year = 1; year <= period; year++) {
      for (let month = 1; month <= 12; month++) {
        currentValue = currentValue * (1 + monthlyReturn) + monthly;
        currentContributions += monthly;
      }

      yearlyGrowth.push({
        year,
        value: currentValue.toFixed(0),
        contributions: currentContributions.toFixed(0),
        gains: (currentValue - currentContributions).toFixed(0),
        growth: ((currentValue / currentContributions - 1) * 100).toFixed(1),
      });
    }

    // –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
    const riskAnalysis = analyzeRisk(returnRate, period, inflation);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = getInvestmentRecommendations(
      initial,
      monthly,
      returnRate,
      period,
      inflation,
      tax
    );

    setResult({
      initialInvestment: initial.toFixed(0),
      monthlyContribution: monthly.toFixed(0),
      annualReturn: returnRate.toFixed(2),
      investmentPeriod: period,
      inflationRate: inflation.toFixed(1),
      taxRate: tax.toFixed(1),
      totalInvestment: totalInvestment.toFixed(0),
      totalContributions: totalContributions.toFixed(0),
      totalGains: (totalInvestment - totalContributions).toFixed(0),
      realValue: realValue.toFixed(0),
      afterTaxValue: afterTaxValue.toFixed(0),
      taxAmount: taxAmount.toFixed(0),
      yearlyGrowth,
      riskAnalysis,
      recommendations,
    });
  };

  const analyzeRisk = (
    returnRate: number,
    period: number,
    inflation: number
  ) => {
    let riskLevel = '';
    let riskScore = 0;

    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    if (returnRate < 0) riskScore += 30;
    else if (returnRate < 5) riskScore += 20;
    else if (returnRate < 10) riskScore += 10;
    else if (returnRate > 20) riskScore += 15;

    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    if (period < 5) riskScore += 20;
    else if (period > 30) riskScore += 10;

    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    if (inflation > 10) riskScore += 25;
    else if (inflation > 5) riskScore += 15;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    if (riskScore <= 20) riskLevel = '–ù–∏–∑–∫–∏–π';
    else if (riskScore <= 40) riskLevel = '–£–º–µ—Ä–µ–Ω–Ω—ã–π';
    else if (riskScore <= 60) riskLevel = '–í—ã—Å–æ–∫–∏–π';
    else riskLevel = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π';

    return {
      riskLevel,
      riskScore,
      factors: getRiskFactors(returnRate, period, inflation),
    };
  };

  const getRiskFactors = (
    returnRate: number,
    period: number,
    inflation: number
  ): string[] => {
    const factors = [];

    if (returnRate < 0) factors.push('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å');
    if (returnRate > 20) factors.push('–í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)');
    if (period < 5) factors.push('–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    if (inflation > 10) factors.push('–í—ã—Å–æ–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è');
    if (returnRate < inflation) factors.push('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏');

    if (factors.length === 0) factors.push('–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');

    return factors;
  };

  const getInvestmentRecommendations = (
    initial: number,
    monthly: number,
    returnRate: number,
    period: number,
    inflation: number,
    tax: number
  ): string[] => {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—á–∞–ª—å–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
    if (initial < 10000) {
      recommendations.push(
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞'
      );
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º –≤–∑–Ω–æ—Å–∞–º
    if (monthly < 5000) {
      recommendations.push(
        '–£–≤–µ–ª–∏—á—å—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è'
      );
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    if (returnRate < inflation) {
      recommendations.push(
        '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ –¥–æ—Ö–æ–¥–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'
      );
    } else if (returnRate > 20) {
      recommendations.push(
        '–í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º - –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å'
      );
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    if (period < 10) {
      recommendations.push(
        '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ - —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –º–µ–Ω–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö'
      );
    } else if (period > 20) {
      recommendations.push(
        '–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–∏–µ —Ä–∏—Å–∫–∏ –¥–ª—è –±–æ–ª—å—à–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏'
      );
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–æ–≥–∞–º
    if (tax > 15) {
      recommendations.push(
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã (–ò–ò–°, –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã)'
      );
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.push(
      '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–ª–∞—Å—Å–∞–º –∞–∫—Ç–∏–≤–æ–≤'
    );
    recommendations.push('–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    recommendations.push(
      '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –Ω–∞–ª–æ–≥–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏'
    );

    return recommendations;
  };

  const clearForm = () => {
    setInitialInvestment('');
    setMonthlyContribution('');
    setAnnualReturn('');
    setInvestmentPeriod('10');
    setInflationRate('3');
    setTaxRate('13');
    setResult(null);
    setError('');
  };

  return (
    <div className={`${styles.calculator} investmentCalculator`}>
      <div className="calculatorHeader">
        <h2>üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</h2>
        <p>
          –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –±—É–¥—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞,
          –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –Ω–∞–ª–æ–≥–æ–≤.
        </p>
      </div>

      <form
        className="calculatorForm"
        onSubmit={(e) => {
          e.preventDefault();
          calculateInvestment();
        }}
      >
        <div className="inputGroup">
          <label>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</label>
          <div className="inputGrid">
            <div>
              <label htmlFor="initialInvestment">
                –ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (‚ÇΩ)
              </label>
              <input
                id="initialInvestment"
                type="number"
                value={initialInvestment}
                onChange={(e) => setInitialInvestment(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 100000"
                step="10000"
                min="0"
                max="10000000"
              />
            </div>
            <div>
              <label htmlFor="monthlyContribution">
                –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã (‚ÇΩ)
              </label>
              <input
                id="monthlyContribution"
                type="number"
                value={monthlyContribution}
                onChange={(e) => setMonthlyContribution(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 10000"
                step="1000"
                min="0"
                max="1000000"
              />
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–£—Å–ª–æ–≤–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</label>
          <div className="inputRow">
            <div>
              <label htmlFor="annualReturn">–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)</label>
              <input
                id="annualReturn"
                type="number"
                value={annualReturn}
                onChange={(e) => setAnnualReturn(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 12.5"
                step="0.1"
                min="-50"
                max="100"
              />
            </div>
            <div>
              <label htmlFor="investmentPeriod">
                –ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–µ—Ç)
              </label>
              <select
                id="investmentPeriod"
                value={investmentPeriod}
                onChange={(e) => setInvestmentPeriod(e.target.value)}
              >
                <option value="1">1 –≥–æ–¥</option>
                <option value="3">3 –≥–æ–¥–∞</option>
                <option value="5">5 –ª–µ—Ç</option>
                <option value="10">10 –ª–µ—Ç</option>
                <option value="15">15 –ª–µ—Ç</option>
                <option value="20">20 –ª–µ—Ç</option>
                <option value="25">25 –ª–µ—Ç</option>
                <option value="30">30 –ª–µ—Ç</option>
              </select>
            </div>
          </div>
        </div>

        <div className="inputGroup">
          <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</label>
          <div className="inputRow">
            <div>
              <label htmlFor="inflationRate">–ò–Ω—Ñ–ª—è—Ü–∏—è (% –≤ –≥–æ–¥)</label>
              <input
                id="inflationRate"
                type="number"
                value={inflationRate}
                onChange={(e) => setInflationRate(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 3.0"
                step="0.1"
                min="0"
                max="50"
              />
            </div>
            <div>
              <label htmlFor="taxRate">–ù–∞–ª–æ–≥ –Ω–∞ –¥–æ—Ö–æ–¥—ã (%)</label>
              <input
                id="taxRate"
                type="number"
                value={taxRate}
                onChange={(e) => setTaxRate(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 13"
                step="1"
                min="0"
                max="50"
              />
            </div>
          </div>
        </div>

        {error && <div className="error">{error}</div>}

        <div className="inputGroup">
          <button type="submit" className="calculateBtn">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
          </button>
        </div>
      </form>

      {result && (
        <div className="result">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>

          <div className={styles.investmentSummary}>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</span>
              <span className={styles.value}>{result.initialInvestment} ‚ÇΩ</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã:</span>
              <span className={styles.value}>
                {result.monthlyContribution} ‚ÇΩ
              </span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</span>
              <span className={styles.value}>{result.annualReturn}%</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.label}>–ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</span>
              <span className={styles.value}>
                {result.investmentPeriod} –ª–µ—Ç
              </span>
            </div>
          </div>

          <div className={styles.resultValue}>
            <span className={styles.amount}>{result.totalInvestment}</span>
            <span className={styles.unit}>
              ‚ÇΩ —á–µ—Ä–µ–∑ {result.investmentPeriod} –ª–µ—Ç
            </span>
          </div>

          <div className={styles.investmentDetails}>
            <h4>–î–µ—Ç–∞–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</h4>
            <div className={styles.detailsGrid}>
              <div className={styles.detailItem}>
                <span className={styles.label}>–û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</span>
                <span className={styles.value}>
                  {result.totalContributions} ‚ÇΩ
                </span>
              </div>
              <div className={styles.detailItem}>
                <span className={styles.label}>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</span>
                <span className={styles.value}>{result.totalGains} ‚ÇΩ</span>
              </div>
              <div className={styles.detailItem}>
                <span className={styles.label}>
                  –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏):
                </span>
                <span className={styles.value}>{result.realValue} ‚ÇΩ</span>
              </div>
              <div className={styles.detailItem}>
                <span className={styles.label}>
                  –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤:
                </span>
                <span className={styles.value}>{result.afterTaxValue} ‚ÇΩ</span>
              </div>
              <div className={styles.detailItem}>
                <span className={styles.label}>–°—É–º–º–∞ –Ω–∞–ª–æ–≥–æ–≤:</span>
                <span className={styles.value}>{result.taxAmount} ‚ÇΩ</span>
              </div>
            </div>
          </div>

          <div className={styles.yearlyGrowth}>
            <h4>–ì–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</h4>
            <div className={styles.growthTable}>
              <table>
                <thead>
                  <tr>
                    <th>–ì–æ–¥</th>
                    <th>–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)</th>
                    <th>–í–∑–Ω–æ—Å—ã (‚ÇΩ)</th>
                    <th>–î–æ—Ö–æ–¥ (‚ÇΩ)</th>
                    <th>–†–æ—Å—Ç (%)</th>
                  </tr>
                </thead>
                <tbody>
                  {result.yearlyGrowth.map((year: any) => (
                    <tr key={year.year}>
                      <td>{year.year}</td>
                      <td>{year.value}</td>
                      <td>{year.contributions}</td>
                      <td>{year.gains}</td>
                      <td>{year.growth}%</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          <div className={styles.riskAnalysis}>
            <h4>–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:</h4>
            <div className={styles.riskGrid}>
              <div className={styles.riskItem}>
                <span className={styles.label}>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</span>
                <span className={styles.value}>
                  {result.riskAnalysis.riskLevel}
                </span>
              </div>
              <div className={styles.riskItem}>
                <span className={styles.label}>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:</span>
                <span className={styles.value}>
                  {result.riskAnalysis.riskScore}/100
                </span>
              </div>
            </div>
            <div className={styles.riskFactors}>
              <strong>–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:</strong>
              <ul>
                {result.riskAnalysis.factors.map(
                  (factor: string, index: number) => (
                    <li key={index}>{factor}</li>
                  )
                )}
              </ul>
            </div>
          </div>

          <div className={styles.recommendation}>
            <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
            <ul className={styles.recommendationsList}>
              {result.recommendations.map((rec: string, index: number) => (
                <li key={index}>{rec}</li>
              ))}
            </ul>
          </div>
        </div>
      )}

      <div className="inputGroup" style={{ marginTop: '2rem' }}>
        <button
          type="button"
          onClick={clearForm}
          className="calculateBtn"
          style={{ background: 'var(--gray-500)' }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        </button>
      </div>
    </div>
  );
};

export default InvestmentCalculator;
